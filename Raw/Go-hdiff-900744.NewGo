executables/Languages/Go.hs:81:1-42: Splicing declarations
    deriveFamilyWith ''GoSingl [t| GoSource |]
  ======>
    type FamGoSource =
        '[GoSource,
          GoId,
          [GoPrel],
          [GoDecl],
          GoPrel,
          [GoImpSpec],
          GoImpSpec,
          GoImpType,
          GoOp,
          GoDecl,
          [GoCVSpec],
          [GoTypeSpec],
          GoFuncDecl,
          GoMethDecl,
          GoCVSpec,
          [GoId],
          Maybe GoType,
          [GoExpr],
          GoType,
          GoExpr,
          GoChanKind,
          GoSig,
          [GoMethSpec],
          [GoFieldType],
          GoPrim,
          GoLit,
          GoRec,
          GoComp,
          GoFuncExpr,
          [GoElement],
          GoElement,
          GoKey,
          GoValue,
          GoBlock,
          [GoParam],
          GoParam,
          [GoStmt],
          GoStmt,
          GoSimp,
          Maybe GoId,
          GoCond,
          Maybe GoStmt,
          [GoCase GoChan],
          [GoCase GoExpr],
          [GoCase GoType],
          GoForClause,
          Maybe GoSimp,
          Maybe GoExpr,
          GoCase GoChan,
          [GoChan],
          GoChan,
          Maybe (GoExpr, GoOp),
          (GoExpr, GoOp),
          GoCase GoExpr,
          GoCase GoType,
          [GoType],
          GoMethSpec,
          GoFieldType,
          GoTypeSpec]
    type CodesGoSource =
        '['['[ 'I ( 'S  'Z),
               'I ( 'S ( 'S  'Z)),
               'I ( 'S ( 'S ( 'S  'Z)))]],
          '['[ 'K  'GoString]],
          '['[], '[ 'I ( 'S ( 'S ( 'S ( 'S  'Z)))),  'I ( 'S ( 'S  'Z))]],
          '['[],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))),
               'I ( 'S ( 'S ( 'S  'Z)))]],
          '['[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))]],
          '['[],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))]],
          '['[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))),
               'K  'GoString]],
          '['[],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))],
            '[ 'I ( 'S  'Z)]],
          '['[ 'K  'GoString]],
          '['[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))]],
          '['[],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))]],
          '['[],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))]],
          '['[ 'I ( 'S  'Z),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))]],
          '['[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))),
               'I ( 'S  'Z),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))]],
          '['[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))]],
          '['[],
            '[ 'I ( 'S  'Z),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))]],
          '['[],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))]],
          '['[],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))]],
          '['[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))),
               'I ( 'S  'Z)],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))]],
          '['[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))]],
          '['[], '[], '[]],
          '['[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))]],
          '['[],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))]],
          '['[],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))]],
          '['[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))),
               'I ( 'S  'Z)],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))),
               'I ( 'S  'Z)],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))),
               'I ( 'S  'Z)],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))),
               'K  'GoBool]],
          '['[ 'K  'GoString,  'K  'GoInteger],
            '[ 'K  'GoString,  'K  'GoFloat],
            '[ 'K  'GoString,  'K  'GoFloat],
            '[ 'K  'GoString,  'K  'GoChar],
            '[ 'K  'GoString,  'K  'GoString],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))]],
          '['[ 'K  'GoBool,
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))]],
          '['[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))]],
          '['[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))]],
          '['[],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))]],
          '['[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))]],
          '['[],
            '[ 'I ( 'S  'Z)],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))]],
          '['[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))]],
          '['[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))],
            '[]],
          '['[],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))]],
          '['[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))]],
          '['[],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))]],
          '['[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))],
            '[ 'I ( 'S  'Z),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))],
            '[ 'I ( 'S  'Z)],
            '[],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))]],
          '['[],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))]],
          '['[], '[ 'I ( 'S  'Z)]],
          '['[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))]],
          '['[],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))]],
          '['[],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))]],
          '['[],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))]],
          '['[],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))]],
          '['[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))]],
          '['[],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))]],
          '['[],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))]],
          '['[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))]],
          '['[],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))))]],
          '['[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))]],
          '['[],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))))))))]],
          '['[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))]],
          '['[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))]],
          '['[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))]],
          '['[],
            '[ 'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))))))))))]],
          '['[ 'I ( 'S  'Z),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))],
            '[ 'I ( 'S  'Z)]],
          '['[ 'K  'GoString,
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))],
            '[ 'K  'GoString,
               'K  'GoBool,
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))]],
          '['[ 'I ( 'S  'Z),
               'I ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))]]]
    pattern IdxGoSource = SZ
    pattern IdxGoId = SS SZ
    pattern IdxListGoPrel = SS (SS SZ)
    pattern IdxListGoDecl = SS (SS (SS SZ))
    pattern IdxGoPrel = SS (SS (SS (SS SZ)))
    pattern IdxListGoImpSpec = SS (SS (SS (SS (SS SZ))))
    pattern IdxGoImpSpec = SS (SS (SS (SS (SS (SS SZ)))))
    pattern IdxGoImpType = SS (SS (SS (SS (SS (SS (SS SZ))))))
    pattern IdxGoOp = SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))
    pattern IdxGoDecl = SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))
    pattern IdxListGoCVSpec = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))
    pattern IdxListGoTypeSpec = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))
    pattern IdxGoFuncDecl = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))
    pattern IdxGoMethDecl = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))
    pattern IdxGoCVSpec = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))
    pattern IdxListGoId = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))
    pattern IdxMaybeGoType = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))
    pattern IdxListGoExpr = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))
    pattern IdxGoType = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))
    pattern IdxGoExpr = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))
    pattern IdxGoChanKind = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))
    pattern IdxGoSig = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))
    pattern IdxListGoMethSpec = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))
    pattern IdxListGoFieldType = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))
    pattern IdxGoPrim = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))
    pattern IdxGoLit = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))
    pattern IdxGoRec = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))
    pattern IdxGoComp = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))
    pattern IdxGoFuncExpr = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))
    pattern IdxListGoElement = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))
    pattern IdxGoElement = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))
    pattern IdxGoKey = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))
    pattern IdxGoValue = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))
    pattern IdxGoBlock = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))
    pattern IdxListGoParam = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))
    pattern IdxGoParam = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))))
    pattern IdxListGoStmt = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))))
    pattern IdxGoStmt = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))))))
    pattern IdxGoSimp = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))))))
    pattern IdxMaybeGoId = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))))))))
    pattern IdxGoCond = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))))))))
    pattern IdxMaybeGoStmt = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))))))))))
    pattern IdxListGoCaseGoChan = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))))))))))
    pattern IdxListGoCaseGoExpr = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))))))))))))
    pattern IdxListGoCaseGoType = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))))))))))))
    pattern IdxGoForClause = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))))))))))))))
    pattern IdxMaybeGoSimp = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))))))))))))))
    pattern IdxMaybeGoExpr = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))))))))))))))))
    pattern IdxGoCaseGoChan = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))))))))))))))))
    pattern IdxListGoChan = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))))))))))))))))))
    pattern IdxGoChan = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))))))))))))))))))
    pattern IdxMaybeTup1GoExprGoOp = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))))))))))))))))))))
    pattern IdxTup1GoExprGoOp = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))))))))))))))))))))
    pattern IdxGoCaseGoExpr = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))))))))))))))))))))))
    pattern IdxGoCaseGoType = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))))))))))))))))))))))
    pattern IdxListGoType = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))))))))))))))))))))))))
    pattern IdxGoMethSpec = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))))))))))))))))))))))))
    pattern IdxGoFieldType = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    pattern IdxGoTypeSpec = SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    pattern GoSource_ ::
              phi_a2Eps ( 'S  'Z)
              -> phi_a2Eps ( 'S ( 'S  'Z))
                 -> phi_a2Eps ( 'S ( 'S ( 'S  'Z)))
                    -> View kon_a2Ept phi_a2Eps (Lkup  'Z CodesGoSource)
    pattern GoSource_ p_a2Epp p_a2Epq p_a2Epr = Tag CZ
                                                    (NA_I p_a2Epp :* (NA_I p_a2Epq :* (NA_I p_a2Epr :* Nil)))
    pattern GoId_ ::
              kon_a2Epw  'GoString
              -> View kon_a2Epw phi_a2Epv (Lkup ( 'S  'Z) CodesGoSource)
    pattern GoId_ p_a2Epu = Tag CZ (NA_K p_a2Epu :* Nil)
    pattern ListGoPrel_Ifx0 ::
              View kon_a2Epy phi_a2Epx (Lkup ( 'S ( 'S  'Z)) CodesGoSource)
    pattern ListGoPrel_Ifx0 = Tag CZ Nil
    pattern ListGoPrel_Ifx1 ::
              phi_a2EpB ( 'S ( 'S ( 'S ( 'S  'Z))))
              -> phi_a2EpB ( 'S ( 'S  'Z))
                 -> View kon_a2EpC phi_a2EpB (Lkup ( 'S ( 'S  'Z)) CodesGoSource)
    pattern ListGoPrel_Ifx1 p_a2Epz p_a2EpA = Tag (CS CZ)
                                                  (NA_I p_a2Epz :* (NA_I p_a2EpA :* Nil))
    pattern ListGoDecl_Ifx0 ::
              View kon_a2EpE phi_a2EpD (Lkup ( 'S ( 'S ( 'S  'Z))) CodesGoSource)
    pattern ListGoDecl_Ifx0 = Tag CZ Nil
    pattern ListGoDecl_Ifx1 ::
              phi_a2EpH ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))
              -> phi_a2EpH ( 'S ( 'S ( 'S  'Z)))
                 -> View kon_a2EpI phi_a2EpH (Lkup ( 'S ( 'S ( 'S  'Z))) CodesGoSource)
    pattern ListGoDecl_Ifx1 p_a2EpF p_a2EpG = Tag (CS CZ)
                                                  (NA_I p_a2EpF :* (NA_I p_a2EpG :* Nil))
    pattern GoImportDecl_ ::
              phi_a2EpK ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))
              -> View kon_a2EpL phi_a2EpK (Lkup ( 'S ( 'S ( 'S ( 'S  'Z)))) CodesGoSource)
    pattern GoImportDecl_ p_a2EpJ = Tag CZ (NA_I p_a2EpJ :* Nil)
    pattern ListGoImpSpec_Ifx0 ::
              View kon_a2EpN phi_a2EpM (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))) CodesGoSource)
    pattern ListGoImpSpec_Ifx0 = Tag CZ Nil
    pattern ListGoImpSpec_Ifx1 ::
              phi_a2EpQ ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))
              -> phi_a2EpQ ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))
                 -> View kon_a2EpR phi_a2EpQ (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))) CodesGoSource)
    pattern ListGoImpSpec_Ifx1 p_a2EpO p_a2EpP = Tag (CS CZ)
                                                     (NA_I p_a2EpO :* (NA_I p_a2EpP :* Nil))
    pattern GoImpSpec_ ::
              phi_a2EpU ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))
              -> kon_a2EpV  'GoString
                 -> View kon_a2EpV phi_a2EpU (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))) CodesGoSource)
    pattern GoImpSpec_ p_a2EpS p_a2EpT = Tag CZ
                                             (NA_I p_a2EpS :* (NA_K p_a2EpT :* Nil))
    pattern GoImp_ ::
              View kon_a2EpX phi_a2EpW (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))) CodesGoSource)
    pattern GoImp_ = Tag CZ Nil
    pattern GoImpDot_ ::
              phi_a2EpZ ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))
              -> View kon_a2Eq0 phi_a2EpZ (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))) CodesGoSource)
    pattern GoImpDot_ p_a2EpY = Tag (CS CZ) (NA_I p_a2EpY :* Nil)
    pattern GoImpQual_ ::
              phi_a2Eq2 ( 'S  'Z)
              -> View kon_a2Eq3 phi_a2Eq2 (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))) CodesGoSource)
    pattern GoImpQual_ p_a2Eq1 = Tag (CS (CS CZ)) (NA_I p_a2Eq1 :* Nil)
    pattern GoOp_ ::
              kon_a2Eq6  'GoString
              -> View kon_a2Eq6 phi_a2Eq5 (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))) CodesGoSource)
    pattern GoOp_ p_a2Eq4 = Tag CZ (NA_K p_a2Eq4 :* Nil)
    pattern GoConst_ ::
              phi_a2Eq8 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))
              -> View kon_a2Eq9 phi_a2Eq8 (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))) CodesGoSource)
    pattern GoConst_ p_a2Eq7 = Tag CZ (NA_I p_a2Eq7 :* Nil)
    pattern GoType_ ::
              phi_a2Eqb ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))
              -> View kon_a2Eqc phi_a2Eqb (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))) CodesGoSource)
    pattern GoType_ p_a2Eqa = Tag (CS CZ) (NA_I p_a2Eqa :* Nil)
    pattern GoVar_ ::
              phi_a2Eqe ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))
              -> View kon_a2Eqf phi_a2Eqe (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))) CodesGoSource)
    pattern GoVar_ p_a2Eqd = Tag (CS (CS CZ)) (NA_I p_a2Eqd :* Nil)
    pattern GoFunc_ ::
              phi_a2Eqh ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))
              -> View kon_a2Eqi phi_a2Eqh (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))) CodesGoSource)
    pattern GoFunc_ p_a2Eqg = Tag (CS (CS (CS CZ)))
                                  (NA_I p_a2Eqg :* Nil)
    pattern GoMeth_ ::
              phi_a2Eqk ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))
              -> View kon_a2Eql phi_a2Eqk (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))) CodesGoSource)
    pattern GoMeth_ p_a2Eqj = Tag (CS (CS (CS (CS CZ))))
                                  (NA_I p_a2Eqj :* Nil)
    pattern ListGoCVSpec_Ifx0 ::
              View kon_a2Eqn phi_a2Eqm (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))) CodesGoSource)
    pattern ListGoCVSpec_Ifx0 = Tag CZ Nil
    pattern ListGoCVSpec_Ifx1 ::
              phi_a2Eqq ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))
              -> phi_a2Eqq ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))
                 -> View kon_a2Eqr phi_a2Eqq (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))) CodesGoSource)
    pattern ListGoCVSpec_Ifx1 p_a2Eqo p_a2Eqp = Tag (CS CZ)
                                                    (NA_I p_a2Eqo :* (NA_I p_a2Eqp :* Nil))
    pattern ListGoTypeSpec_Ifx0 ::
              View kon_a2Eqt phi_a2Eqs (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))) CodesGoSource)
    pattern ListGoTypeSpec_Ifx0 = Tag CZ Nil
    pattern ListGoTypeSpec_Ifx1 ::
              phi_a2Eqw ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
              -> phi_a2Eqw ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))
                 -> View kon_a2Eqx phi_a2Eqw (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))) CodesGoSource)
    pattern ListGoTypeSpec_Ifx1 p_a2Equ p_a2Eqv = Tag (CS CZ)
                                                      (NA_I p_a2Equ :* (NA_I p_a2Eqv :* Nil))
    pattern GoFuncDecl_ ::
              phi_a2EqB ( 'S  'Z)
              -> phi_a2EqB ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))
                 -> phi_a2EqB ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))
                    -> View kon_a2EqC phi_a2EqB (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))) CodesGoSource)
    pattern GoFuncDecl_ p_a2Eqy p_a2Eqz p_a2EqA = Tag CZ
                                                      (NA_I p_a2Eqy :* (NA_I p_a2Eqz :* (NA_I p_a2EqA :* Nil)))
    pattern GoMethDecl_ ::
              phi_a2EqH ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))
              -> phi_a2EqH ( 'S  'Z)
                 -> phi_a2EqH ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))
                    -> phi_a2EqH ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))
                       -> View kon_a2EqI phi_a2EqH (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))) CodesGoSource)
    pattern GoMethDecl_ p_a2EqD p_a2EqE p_a2EqF p_a2EqG = Tag CZ
                                                              (NA_I p_a2EqD :* (NA_I p_a2EqE :* (NA_I p_a2EqF :* (NA_I p_a2EqG :* Nil))))
    pattern GoCVSpec_ ::
              phi_a2EqM ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))
              -> phi_a2EqM ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))
                 -> phi_a2EqM ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))
                    -> View kon_a2EqN phi_a2EqM (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))) CodesGoSource)
    pattern GoCVSpec_ p_a2EqJ p_a2EqK p_a2EqL = Tag CZ
                                                    (NA_I p_a2EqJ :* (NA_I p_a2EqK :* (NA_I p_a2EqL :* Nil)))
    pattern ListGoId_Ifx0 ::
              View kon_a2EqP phi_a2EqO (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))) CodesGoSource)
    pattern ListGoId_Ifx0 = Tag CZ Nil
    pattern ListGoId_Ifx1 ::
              phi_a2EqS ( 'S  'Z)
              -> phi_a2EqS ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))
                 -> View kon_a2EqT phi_a2EqS (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))) CodesGoSource)
    pattern ListGoId_Ifx1 p_a2EqQ p_a2EqR = Tag (CS CZ)
                                                (NA_I p_a2EqQ :* (NA_I p_a2EqR :* Nil))
    pattern MaybeGoTypeNothing_ ::
              View kon_a2EqV phi_a2EqU (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))) CodesGoSource)
    pattern MaybeGoTypeNothing_ = Tag CZ Nil
    pattern MaybeGoTypeJust_ ::
              phi_a2EqX ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))
              -> View kon_a2EqY phi_a2EqX (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))) CodesGoSource)
    pattern MaybeGoTypeJust_ p_a2EqW = Tag (CS CZ)
                                           (NA_I p_a2EqW :* Nil)
    pattern ListGoExpr_Ifx0 ::
              View kon_a2Er0 phi_a2EqZ (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))) CodesGoSource)
    pattern ListGoExpr_Ifx0 = Tag CZ Nil
    pattern ListGoExpr_Ifx1 ::
              phi_a2Er3 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
              -> phi_a2Er3 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))
                 -> View kon_a2Er4 phi_a2Er3 (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))) CodesGoSource)
    pattern ListGoExpr_Ifx1 p_a2Er1 p_a2Er2 = Tag (CS CZ)
                                                  (NA_I p_a2Er1 :* (NA_I p_a2Er2 :* Nil))
    pattern GoTypeName_ ::
              phi_a2Er7 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))
              -> phi_a2Er7 ( 'S  'Z)
                 -> View kon_a2Er8 phi_a2Er7 (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))) CodesGoSource)
    pattern GoTypeName_ p_a2Er5 p_a2Er6 = Tag CZ
                                              (NA_I p_a2Er5 :* (NA_I p_a2Er6 :* Nil))
    pattern GoArrayType_ ::
              phi_a2Erb ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
              -> phi_a2Erb ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))
                 -> View kon_a2Erc phi_a2Erb (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))) CodesGoSource)
    pattern GoArrayType_ p_a2Er9 p_a2Era = Tag (CS CZ)
                                               (NA_I p_a2Er9 :* (NA_I p_a2Era :* Nil))
    pattern GoChannelType_ ::
              phi_a2Erf ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))
              -> phi_a2Erf ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))
                 -> View kon_a2Erg phi_a2Erf (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))) CodesGoSource)
    pattern GoChannelType_ p_a2Erd p_a2Ere = Tag (CS (CS CZ))
                                                 (NA_I p_a2Erd :* (NA_I p_a2Ere :* Nil))
    pattern GoElipsisType_ ::
              phi_a2Eri ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))
              -> View kon_a2Erj phi_a2Eri (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))) CodesGoSource)
    pattern GoElipsisType_ p_a2Erh = Tag (CS (CS (CS CZ)))
                                         (NA_I p_a2Erh :* Nil)
    pattern GoFunctionType_ ::
              phi_a2Erl ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))
              -> View kon_a2Erm phi_a2Erl (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))) CodesGoSource)
    pattern GoFunctionType_ p_a2Erk = Tag (CS (CS (CS (CS CZ))))
                                          (NA_I p_a2Erk :* Nil)
    pattern GoInterfaceType_ ::
              phi_a2Ero ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))
              -> View kon_a2Erp phi_a2Ero (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))) CodesGoSource)
    pattern GoInterfaceType_ p_a2Ern = Tag (CS (CS (CS (CS (CS CZ)))))
                                           (NA_I p_a2Ern :* Nil)
    pattern GoMapType_ ::
              phi_a2Ers ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))
              -> phi_a2Ers ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))
                 -> View kon_a2Ert phi_a2Ers (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))) CodesGoSource)
    pattern GoMapType_ p_a2Erq p_a2Err = Tag (CS (CS (CS (CS (CS (CS CZ))))))
                                             (NA_I p_a2Erq :* (NA_I p_a2Err :* Nil))
    pattern GoPointerType_ ::
              phi_a2Erv ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))
              -> View kon_a2Erw phi_a2Erv (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))) CodesGoSource)
    pattern GoPointerType_ p_a2Eru = Tag (CS (CS (CS (CS (CS (CS (CS CZ)))))))
                                         (NA_I p_a2Eru :* Nil)
    pattern GoSliceType_ ::
              phi_a2Ery ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))
              -> View kon_a2Erz phi_a2Ery (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))) CodesGoSource)
    pattern GoSliceType_ p_a2Erx = Tag (CS (CS (CS (CS (CS (CS (CS (CS CZ))))))))
                                       (NA_I p_a2Erx :* Nil)
    pattern GoStructType_ ::
              phi_a2ErB ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))
              -> View kon_a2ErC phi_a2ErB (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))) CodesGoSource)
    pattern GoStructType_ p_a2ErA = Tag (CS (CS (CS (CS (CS (CS (CS (CS (CS CZ)))))))))
                                        (NA_I p_a2ErA :* Nil)
    pattern GoPrim_ ::
              phi_a2ErE ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))
              -> View kon_a2ErF phi_a2ErE (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))) CodesGoSource)
    pattern GoPrim_ p_a2ErD = Tag CZ (NA_I p_a2ErD :* Nil)
    pattern Go1Op_ ::
              phi_a2ErI ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))
              -> phi_a2ErI ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
                 -> View kon_a2ErJ phi_a2ErI (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))) CodesGoSource)
    pattern Go1Op_ p_a2ErG p_a2ErH = Tag (CS CZ)
                                         (NA_I p_a2ErG :* (NA_I p_a2ErH :* Nil))
    pattern Go2Op_ ::
              phi_a2ErN ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))
              -> phi_a2ErN ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
                 -> phi_a2ErN ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
                    -> View kon_a2ErO phi_a2ErN (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))) CodesGoSource)
    pattern Go2Op_ p_a2ErK p_a2ErL p_a2ErM = Tag (CS (CS CZ))
                                                 (NA_I p_a2ErK :* (NA_I p_a2ErL :* (NA_I p_a2ErM :* Nil)))
    pattern GoIChan_ ::
              View kon_a2ErQ phi_a2ErP (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))) CodesGoSource)
    pattern GoIChan_ = Tag CZ Nil
    pattern GoOChan_ ::
              View kon_a2ErS phi_a2ErR (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))) CodesGoSource)
    pattern GoOChan_ = Tag (CS CZ) Nil
    pattern GoIOChan_ ::
              View kon_a2ErU phi_a2ErT (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))) CodesGoSource)
    pattern GoIOChan_ = Tag (CS (CS CZ)) Nil
    pattern GoSig_ ::
              phi_a2ErX ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))
              -> phi_a2ErX ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))
                 -> View kon_a2ErY phi_a2ErX (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))) CodesGoSource)
    pattern GoSig_ p_a2ErV p_a2ErW = Tag CZ
                                         (NA_I p_a2ErV :* (NA_I p_a2ErW :* Nil))
    pattern ListGoMethSpec_Ifx0 ::
              View kon_a2Es0 phi_a2ErZ (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))) CodesGoSource)
    pattern ListGoMethSpec_Ifx0 = Tag CZ Nil
    pattern ListGoMethSpec_Ifx1 ::
              phi_a2Es3 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))))))))))))
              -> phi_a2Es3 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))
                 -> View kon_a2Es4 phi_a2Es3 (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))) CodesGoSource)
    pattern ListGoMethSpec_Ifx1 p_a2Es1 p_a2Es2 = Tag (CS CZ)
                                                      (NA_I p_a2Es1 :* (NA_I p_a2Es2 :* Nil))
    pattern ListGoFieldType_Ifx0 ::
              View kon_a2Es6 phi_a2Es5 (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))) CodesGoSource)
    pattern ListGoFieldType_Ifx0 = Tag CZ Nil
    pattern ListGoFieldType_Ifx1 ::
              phi_a2Es9 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
              -> phi_a2Es9 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))
                 -> View kon_a2Esa phi_a2Es9 (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))) CodesGoSource)
    pattern ListGoFieldType_Ifx1 p_a2Es7 p_a2Es8 = Tag (CS CZ)
                                                       (NA_I p_a2Es7 :* (NA_I p_a2Es8 :* Nil))
    pattern GoLiteral_ ::
              phi_a2Esc ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))
              -> View kon_a2Esd phi_a2Esc (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))) CodesGoSource)
    pattern GoLiteral_ p_a2Esb = Tag CZ (NA_I p_a2Esb :* Nil)
    pattern GoQual_ ::
              phi_a2Esg ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))
              -> phi_a2Esg ( 'S  'Z)
                 -> View kon_a2Esh phi_a2Esg (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))) CodesGoSource)
    pattern GoQual_ p_a2Ese p_a2Esf = Tag (CS CZ)
                                          (NA_I p_a2Ese :* (NA_I p_a2Esf :* Nil))
    pattern GoMethod_ ::
              phi_a2Esk ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))
              -> phi_a2Esk ( 'S  'Z)
                 -> View kon_a2Esl phi_a2Esk (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))) CodesGoSource)
    pattern GoMethod_ p_a2Esi p_a2Esj = Tag (CS (CS CZ))
                                            (NA_I p_a2Esi :* (NA_I p_a2Esj :* Nil))
    pattern GoParen_ ::
              phi_a2Esn ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
              -> View kon_a2Eso phi_a2Esn (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))) CodesGoSource)
    pattern GoParen_ p_a2Esm = Tag (CS (CS (CS CZ)))
                                   (NA_I p_a2Esm :* Nil)
    pattern GoCast_ ::
              phi_a2Esr ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))
              -> phi_a2Esr ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
                 -> View kon_a2Ess phi_a2Esr (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))) CodesGoSource)
    pattern GoCast_ p_a2Esp p_a2Esq = Tag (CS (CS (CS (CS CZ))))
                                          (NA_I p_a2Esp :* (NA_I p_a2Esq :* Nil))
    pattern GoNew_ ::
              phi_a2Esu ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))
              -> View kon_a2Esv phi_a2Esu (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))) CodesGoSource)
    pattern GoNew_ p_a2Est = Tag (CS (CS (CS (CS (CS CZ)))))
                                 (NA_I p_a2Est :* Nil)
    pattern GoMake_ ::
              phi_a2Esy ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))
              -> phi_a2Esy ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))
                 -> View kon_a2Esz phi_a2Esy (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))) CodesGoSource)
    pattern GoMake_ p_a2Esw p_a2Esx = Tag (CS (CS (CS (CS (CS (CS CZ))))))
                                          (NA_I p_a2Esw :* (NA_I p_a2Esx :* Nil))
    pattern GoSelect_ ::
              phi_a2EsC ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))
              -> phi_a2EsC ( 'S  'Z)
                 -> View kon_a2EsD phi_a2EsC (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))) CodesGoSource)
    pattern GoSelect_ p_a2EsA p_a2EsB = Tag (CS (CS (CS (CS (CS (CS (CS CZ)))))))
                                            (NA_I p_a2EsA :* (NA_I p_a2EsB :* Nil))
    pattern GoIndex_ ::
              phi_a2EsG ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))
              -> phi_a2EsG ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
                 -> View kon_a2EsH phi_a2EsG (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))) CodesGoSource)
    pattern GoIndex_ p_a2EsE p_a2EsF = Tag (CS (CS (CS (CS (CS (CS (CS (CS CZ))))))))
                                           (NA_I p_a2EsE :* (NA_I p_a2EsF :* Nil))
    pattern GoSlice_ ::
              phi_a2EsK ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))
              -> phi_a2EsK ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))
                 -> View kon_a2EsL phi_a2EsK (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))) CodesGoSource)
    pattern GoSlice_ p_a2EsI p_a2EsJ = Tag (CS (CS (CS (CS (CS (CS (CS (CS (CS CZ)))))))))
                                           (NA_I p_a2EsI :* (NA_I p_a2EsJ :* Nil))
    pattern GoTA_ ::
              phi_a2EsO ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))
              -> phi_a2EsO ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))
                 -> View kon_a2EsP phi_a2EsO (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))) CodesGoSource)
    pattern GoTA_ p_a2EsM p_a2EsN = Tag (CS (CS (CS (CS (CS (CS (CS (CS (CS (CS CZ))))))))))
                                        (NA_I p_a2EsM :* (NA_I p_a2EsN :* Nil))
    pattern GoCall_ ::
              phi_a2EsT ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))
              -> phi_a2EsT ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))
                 -> kon_a2EsU  'GoBool
                    -> View kon_a2EsU phi_a2EsT (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))) CodesGoSource)
    pattern GoCall_ p_a2EsQ p_a2EsR p_a2EsS = Tag (CS (CS (CS (CS (CS (CS (CS (CS (CS (CS (CS CZ)))))))))))
                                                  (NA_I p_a2EsQ :* (NA_I p_a2EsR :* (NA_K p_a2EsS :* Nil)))
    pattern GoLitInt_ ::
              kon_a2EsY  'GoString
              -> kon_a2EsY  'GoInteger
                 -> View kon_a2EsY phi_a2EsX (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))) CodesGoSource)
    pattern GoLitInt_ p_a2EsV p_a2EsW = Tag CZ
                                            (NA_K p_a2EsV :* (NA_K p_a2EsW :* Nil))
    pattern GoLitReal_ ::
              kon_a2Et2  'GoString
              -> kon_a2Et2  'GoFloat
                 -> View kon_a2Et2 phi_a2Et1 (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))) CodesGoSource)
    pattern GoLitReal_ p_a2EsZ p_a2Et0 = Tag (CS CZ)
                                             (NA_K p_a2EsZ :* (NA_K p_a2Et0 :* Nil))
    pattern GoLitImag_ ::
              kon_a2Et6  'GoString
              -> kon_a2Et6  'GoFloat
                 -> View kon_a2Et6 phi_a2Et5 (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))) CodesGoSource)
    pattern GoLitImag_ p_a2Et3 p_a2Et4 = Tag (CS (CS CZ))
                                             (NA_K p_a2Et3 :* (NA_K p_a2Et4 :* Nil))
    pattern GoLitChar_ ::
              kon_a2Eta  'GoString
              -> kon_a2Eta  'GoChar
                 -> View kon_a2Eta phi_a2Et9 (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))) CodesGoSource)
    pattern GoLitChar_ p_a2Et7 p_a2Et8 = Tag (CS (CS (CS CZ)))
                                             (NA_K p_a2Et7 :* (NA_K p_a2Et8 :* Nil))
    pattern GoLitStr_ ::
              kon_a2Ete  'GoString
              -> kon_a2Ete  'GoString
                 -> View kon_a2Ete phi_a2Etd (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))) CodesGoSource)
    pattern GoLitStr_ p_a2Etb p_a2Etc = Tag (CS (CS (CS (CS CZ))))
                                            (NA_K p_a2Etb :* (NA_K p_a2Etc :* Nil))
    pattern GoLitComp_ ::
              phi_a2Eth ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))
              -> phi_a2Eth ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))
                 -> View kon_a2Eti phi_a2Eth (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))) CodesGoSource)
    pattern GoLitComp_ p_a2Etf p_a2Etg = Tag (CS (CS (CS (CS (CS CZ)))))
                                             (NA_I p_a2Etf :* (NA_I p_a2Etg :* Nil))
    pattern GoLitFunc_ ::
              phi_a2Etk ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))
              -> View kon_a2Etl phi_a2Etk (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))) CodesGoSource)
    pattern GoLitFunc_ p_a2Etj = Tag (CS (CS (CS (CS (CS (CS CZ))))))
                                     (NA_I p_a2Etj :* Nil)
    pattern GoRec_ ::
              kon_a2Etq  'GoBool
              -> phi_a2Etp ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))
                 -> phi_a2Etp ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))
                    -> View kon_a2Etq phi_a2Etp (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))) CodesGoSource)
    pattern GoRec_ p_a2Etm p_a2Etn p_a2Eto = Tag CZ
                                                 (NA_K p_a2Etm :* (NA_I p_a2Etn :* (NA_I p_a2Eto :* Nil)))
    pattern GoComp_ ::
              phi_a2Ets ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))
              -> View kon_a2Ett phi_a2Ets (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))) CodesGoSource)
    pattern GoComp_ p_a2Etr = Tag CZ (NA_I p_a2Etr :* Nil)
    pattern GoFuncExpr_ ::
              phi_a2Etw ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))
              -> phi_a2Etw ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))
                 -> View kon_a2Etx phi_a2Etw (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))) CodesGoSource)
    pattern GoFuncExpr_ p_a2Etu p_a2Etv = Tag CZ
                                              (NA_I p_a2Etu :* (NA_I p_a2Etv :* Nil))
    pattern ListGoElement_Ifx0 ::
              View kon_a2Etz phi_a2Ety (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))) CodesGoSource)
    pattern ListGoElement_Ifx0 = Tag CZ Nil
    pattern ListGoElement_Ifx1 ::
              phi_a2EtC ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))
              -> phi_a2EtC ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))
                 -> View kon_a2EtD phi_a2EtC (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))) CodesGoSource)
    pattern ListGoElement_Ifx1 p_a2EtA p_a2EtB = Tag (CS CZ)
                                                     (NA_I p_a2EtA :* (NA_I p_a2EtB :* Nil))
    pattern GoElement_ ::
              phi_a2EtG ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))
              -> phi_a2EtG ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))
                 -> View kon_a2EtH phi_a2EtG (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoElement_ p_a2EtE p_a2EtF = Tag CZ
                                             (NA_I p_a2EtE :* (NA_I p_a2EtF :* Nil))
    pattern GoKeyNone_ ::
              View kon_a2EtJ phi_a2EtI (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoKeyNone_ = Tag CZ Nil
    pattern GoKeyField_ ::
              phi_a2EtL ( 'S  'Z)
              -> View kon_a2EtM phi_a2EtL (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoKeyField_ p_a2EtK = Tag (CS CZ) (NA_I p_a2EtK :* Nil)
    pattern GoKeyIndex_ ::
              phi_a2EtO ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
              -> View kon_a2EtP phi_a2EtO (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoKeyIndex_ p_a2EtN = Tag (CS (CS CZ))
                                      (NA_I p_a2EtN :* Nil)
    pattern GoValueExpr_ ::
              phi_a2EtR ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
              -> View kon_a2EtS phi_a2EtR (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoValueExpr_ p_a2EtQ = Tag CZ (NA_I p_a2EtQ :* Nil)
    pattern GoValueComp_ ::
              phi_a2EtU ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))
              -> View kon_a2EtV phi_a2EtU (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoValueComp_ p_a2EtT = Tag (CS CZ) (NA_I p_a2EtT :* Nil)
    pattern GoBlock_ ::
              phi_a2EtX ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))
              -> View kon_a2EtY phi_a2EtX (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoBlock_ p_a2EtW = Tag CZ (NA_I p_a2EtW :* Nil)
    pattern GoNoBlock_ ::
              View kon_a2Eu0 phi_a2EtZ (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoNoBlock_ = Tag (CS CZ) Nil
    pattern ListGoParam_Ifx0 ::
              View kon_a2Eu2 phi_a2Eu1 (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern ListGoParam_Ifx0 = Tag CZ Nil
    pattern ListGoParam_Ifx1 ::
              phi_a2Eu5 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))
              -> phi_a2Eu5 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))
                 -> View kon_a2Eu6 phi_a2Eu5 (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern ListGoParam_Ifx1 p_a2Eu3 p_a2Eu4 = Tag (CS CZ)
                                                   (NA_I p_a2Eu3 :* (NA_I p_a2Eu4 :* Nil))
    pattern GoParam_ ::
              phi_a2Eu9 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))
              -> phi_a2Eu9 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))
                 -> View kon_a2Eua phi_a2Eu9 (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoParam_ p_a2Eu7 p_a2Eu8 = Tag CZ
                                           (NA_I p_a2Eu7 :* (NA_I p_a2Eu8 :* Nil))
    pattern ListGoStmt_Ifx0 ::
              View kon_a2Euc phi_a2Eub (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern ListGoStmt_Ifx0 = Tag CZ Nil
    pattern ListGoStmt_Ifx1 ::
              phi_a2Euf ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))
              -> phi_a2Euf ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))
                 -> View kon_a2Eug phi_a2Euf (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern ListGoStmt_Ifx1 p_a2Eud p_a2Eue = Tag (CS CZ)
                                                  (NA_I p_a2Eud :* (NA_I p_a2Eue :* Nil))
    pattern GoStmtDecl_ ::
              phi_a2Eui ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))
              -> View kon_a2Euj phi_a2Eui (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoStmtDecl_ p_a2Euh = Tag CZ (NA_I p_a2Euh :* Nil)
    pattern GoStmtLabeled_ ::
              phi_a2Eum ( 'S  'Z)
              -> phi_a2Eum ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))
                 -> View kon_a2Eun phi_a2Eum (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoStmtLabeled_ p_a2Euk p_a2Eul = Tag (CS CZ)
                                                 (NA_I p_a2Euk :* (NA_I p_a2Eul :* Nil))
    pattern GoStmtSimple_ ::
              phi_a2Eup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))
              -> View kon_a2Euq phi_a2Eup (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoStmtSimple_ p_a2Euo = Tag (CS (CS CZ))
                                        (NA_I p_a2Euo :* Nil)
    pattern GoStmtGo_ ::
              phi_a2Eus ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
              -> View kon_a2Eut phi_a2Eus (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoStmtGo_ p_a2Eur = Tag (CS (CS (CS CZ)))
                                    (NA_I p_a2Eur :* Nil)
    pattern GoStmtReturn_ ::
              phi_a2Euv ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))
              -> View kon_a2Euw phi_a2Euv (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoStmtReturn_ p_a2Euu = Tag (CS (CS (CS (CS CZ))))
                                        (NA_I p_a2Euu :* Nil)
    pattern GoStmtBreak_ ::
              phi_a2Euy ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))
              -> View kon_a2Euz phi_a2Euy (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoStmtBreak_ p_a2Eux = Tag (CS (CS (CS (CS (CS CZ)))))
                                       (NA_I p_a2Eux :* Nil)
    pattern GoStmtContinue_ ::
              phi_a2EuB ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))
              -> View kon_a2EuC phi_a2EuB (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoStmtContinue_ p_a2EuA = Tag (CS (CS (CS (CS (CS (CS CZ))))))
                                          (NA_I p_a2EuA :* Nil)
    pattern GoStmtGoto_ ::
              phi_a2EuE ( 'S  'Z)
              -> View kon_a2EuF phi_a2EuE (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoStmtGoto_ p_a2EuD = Tag (CS (CS (CS (CS (CS (CS (CS CZ)))))))
                                      (NA_I p_a2EuD :* Nil)
    pattern GoStmtFallthrough_ ::
              View kon_a2EuH phi_a2EuG (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoStmtFallthrough_ = Tag (CS (CS (CS (CS (CS (CS (CS (CS CZ))))))))
                                     Nil
    pattern GoStmtBlock_ ::
              phi_a2EuJ ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))
              -> View kon_a2EuK phi_a2EuJ (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoStmtBlock_ p_a2EuI = Tag (CS (CS (CS (CS (CS (CS (CS (CS (CS CZ)))))))))
                                       (NA_I p_a2EuI :* Nil)
    pattern GoStmtIf_ ::
              phi_a2EuO ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))
              -> phi_a2EuO ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))
                 -> phi_a2EuO ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))
                    -> View kon_a2EuP phi_a2EuO (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoStmtIf_ p_a2EuL p_a2EuM p_a2EuN = Tag (CS (CS (CS (CS (CS (CS (CS (CS (CS (CS CZ))))))))))
                                                    (NA_I p_a2EuL :* (NA_I p_a2EuM :* (NA_I p_a2EuN :* Nil)))
    pattern GoStmtSelect_ ::
              phi_a2EuR ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))
              -> View kon_a2EuS phi_a2EuR (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoStmtSelect_ p_a2EuQ = Tag (CS (CS (CS (CS (CS (CS (CS (CS (CS (CS (CS CZ)))))))))))
                                        (NA_I p_a2EuQ :* Nil)
    pattern GoStmtSwitch_ ::
              phi_a2EuV ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))
              -> phi_a2EuV ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))
                 -> View kon_a2EuW phi_a2EuV (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoStmtSwitch_ p_a2EuT p_a2EuU = Tag (CS (CS (CS (CS (CS (CS (CS (CS (CS (CS (CS (CS CZ))))))))))))
                                                (NA_I p_a2EuT :* (NA_I p_a2EuU :* Nil))
    pattern GoStmtTypeSwitch_ ::
              phi_a2Ev0 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))
              -> phi_a2Ev0 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))
                 -> phi_a2Ev0 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))
                    -> View kon_a2Ev1 phi_a2Ev0 (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoStmtTypeSwitch_ p_a2EuX p_a2EuY p_a2EuZ = Tag (CS (CS (CS (CS (CS (CS (CS (CS (CS (CS (CS (CS (CS CZ)))))))))))))
                                                            (NA_I p_a2EuX :* (NA_I p_a2EuY :* (NA_I p_a2EuZ :* Nil)))
    pattern GoStmtFor_ ::
              phi_a2Ev4 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))
              -> phi_a2Ev4 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))
                 -> View kon_a2Ev5 phi_a2Ev4 (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoStmtFor_ p_a2Ev2 p_a2Ev3 = Tag (CS (CS (CS (CS (CS (CS (CS (CS (CS (CS (CS (CS (CS (CS CZ))))))))))))))
                                             (NA_I p_a2Ev2 :* (NA_I p_a2Ev3 :* Nil))
    pattern GoStmtDefer_ ::
              phi_a2Ev7 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
              -> View kon_a2Ev8 phi_a2Ev7 (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoStmtDefer_ p_a2Ev6 = Tag (CS (CS (CS (CS (CS (CS (CS (CS (CS (CS (CS (CS (CS (CS (CS CZ)))))))))))))))
                                       (NA_I p_a2Ev6 :* Nil)
    pattern GoSimpEmpty_ ::
              View kon_a2Eva phi_a2Ev9 (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoSimpEmpty_ = Tag CZ Nil
    pattern GoSimpRecv_ ::
              phi_a2Evc ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
              -> View kon_a2Evd phi_a2Evc (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoSimpRecv_ p_a2Evb = Tag (CS CZ) (NA_I p_a2Evb :* Nil)
    pattern GoSimpSend_ ::
              phi_a2Evg ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
              -> phi_a2Evg ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
                 -> View kon_a2Evh phi_a2Evg (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoSimpSend_ p_a2Eve p_a2Evf = Tag (CS (CS CZ))
                                              (NA_I p_a2Eve :* (NA_I p_a2Evf :* Nil))
    pattern GoSimpExpr_ ::
              phi_a2Evj ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
              -> View kon_a2Evk phi_a2Evj (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoSimpExpr_ p_a2Evi = Tag (CS (CS (CS CZ)))
                                      (NA_I p_a2Evi :* Nil)
    pattern GoSimpInc_ ::
              phi_a2Evm ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
              -> View kon_a2Evn phi_a2Evm (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoSimpInc_ p_a2Evl = Tag (CS (CS (CS (CS CZ))))
                                     (NA_I p_a2Evl :* Nil)
    pattern GoSimpDec_ ::
              phi_a2Evp ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
              -> View kon_a2Evq phi_a2Evp (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoSimpDec_ p_a2Evo = Tag (CS (CS (CS (CS (CS CZ)))))
                                     (NA_I p_a2Evo :* Nil)
    pattern GoSimpAsn_ ::
              phi_a2Evu ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))
              -> phi_a2Evu ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))
                 -> phi_a2Evu ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))
                    -> View kon_a2Evv phi_a2Evu (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoSimpAsn_ p_a2Evr p_a2Evs p_a2Evt = Tag (CS (CS (CS (CS (CS (CS CZ))))))
                                                     (NA_I p_a2Evr :* (NA_I p_a2Evs :* (NA_I p_a2Evt :* Nil)))
    pattern GoSimpVar_ ::
              phi_a2Evy ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))
              -> phi_a2Evy ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))
                 -> View kon_a2Evz phi_a2Evy (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoSimpVar_ p_a2Evw p_a2Evx = Tag (CS (CS (CS (CS (CS (CS (CS CZ)))))))
                                             (NA_I p_a2Evw :* (NA_I p_a2Evx :* Nil))
    pattern MaybeGoIdNothing_ ::
              View kon_a2EvB phi_a2EvA (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern MaybeGoIdNothing_ = Tag CZ Nil
    pattern MaybeGoIdJust_ ::
              phi_a2EvD ( 'S  'Z)
              -> View kon_a2EvE phi_a2EvD (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern MaybeGoIdJust_ p_a2EvC = Tag (CS CZ) (NA_I p_a2EvC :* Nil)
    pattern GoCond_ ::
              phi_a2EvH ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))
              -> phi_a2EvH ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))
                 -> View kon_a2EvI phi_a2EvH (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoCond_ p_a2EvF p_a2EvG = Tag CZ
                                          (NA_I p_a2EvF :* (NA_I p_a2EvG :* Nil))
    pattern MaybeGoStmtNothing_ ::
              View kon_a2EvK phi_a2EvJ (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern MaybeGoStmtNothing_ = Tag CZ Nil
    pattern MaybeGoStmtJust_ ::
              phi_a2EvM ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))
              -> View kon_a2EvN phi_a2EvM (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern MaybeGoStmtJust_ p_a2EvL = Tag (CS CZ)
                                           (NA_I p_a2EvL :* Nil)
    pattern ListGoCaseGoChan_Ifx0 ::
              View kon_a2EvP phi_a2EvO (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern ListGoCaseGoChan_Ifx0 = Tag CZ Nil
    pattern ListGoCaseGoChan_Ifx1 ::
              phi_a2EvS ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))))
              -> phi_a2EvS ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))
                 -> View kon_a2EvT phi_a2EvS (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern ListGoCaseGoChan_Ifx1 p_a2EvQ p_a2EvR = Tag (CS CZ)
                                                        (NA_I p_a2EvQ :* (NA_I p_a2EvR :* Nil))
    pattern ListGoCaseGoExpr_Ifx0 ::
              View kon_a2EvV phi_a2EvU (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern ListGoCaseGoExpr_Ifx0 = Tag CZ Nil
    pattern ListGoCaseGoExpr_Ifx1 ::
              phi_a2EvY ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))))))))
              -> phi_a2EvY ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))
                 -> View kon_a2EvZ phi_a2EvY (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern ListGoCaseGoExpr_Ifx1 p_a2EvW p_a2EvX = Tag (CS CZ)
                                                        (NA_I p_a2EvW :* (NA_I p_a2EvX :* Nil))
    pattern ListGoCaseGoType_Ifx0 ::
              View kon_a2Ew1 phi_a2Ew0 (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern ListGoCaseGoType_Ifx0 = Tag CZ Nil
    pattern ListGoCaseGoType_Ifx1 ::
              phi_a2Ew4 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))))))))))
              -> phi_a2Ew4 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))
                 -> View kon_a2Ew5 phi_a2Ew4 (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern ListGoCaseGoType_Ifx1 p_a2Ew2 p_a2Ew3 = Tag (CS CZ)
                                                        (NA_I p_a2Ew2 :* (NA_I p_a2Ew3 :* Nil))
    pattern GoForWhile_ ::
              phi_a2Ew7 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
              -> View kon_a2Ew8 phi_a2Ew7 (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoForWhile_ p_a2Ew6 = Tag CZ (NA_I p_a2Ew6 :* Nil)
    pattern GoForThree_ ::
              phi_a2Ewc ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))
              -> phi_a2Ewc ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))
                 -> phi_a2Ewc ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))
                    -> View kon_a2Ewd phi_a2Ewc (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoForThree_ p_a2Ew9 p_a2Ewa p_a2Ewb = Tag (CS CZ)
                                                      (NA_I p_a2Ew9 :* (NA_I p_a2Ewa :* (NA_I p_a2Ewb :* Nil)))
    pattern GoForRange_ ::
              phi_a2Ewg ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))
              -> phi_a2Ewg ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
                 -> View kon_a2Ewh phi_a2Ewg (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoForRange_ p_a2Ewe p_a2Ewf = Tag (CS (CS CZ))
                                              (NA_I p_a2Ewe :* (NA_I p_a2Ewf :* Nil))
    pattern MaybeGoSimpNothing_ ::
              View kon_a2Ewj phi_a2Ewi (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern MaybeGoSimpNothing_ = Tag CZ Nil
    pattern MaybeGoSimpJust_ ::
              phi_a2Ewl ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))
              -> View kon_a2Ewm phi_a2Ewl (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern MaybeGoSimpJust_ p_a2Ewk = Tag (CS CZ)
                                           (NA_I p_a2Ewk :* Nil)
    pattern MaybeGoExprNothing_ ::
              View kon_a2Ewo phi_a2Ewn (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern MaybeGoExprNothing_ = Tag CZ Nil
    pattern MaybeGoExprJust_ ::
              phi_a2Ewq ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
              -> View kon_a2Ewr phi_a2Ewq (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern MaybeGoExprJust_ p_a2Ewp = Tag (CS CZ)
                                           (NA_I p_a2Ewp :* Nil)
    pattern GoCaseGoChanGoCase_ ::
              phi_a2Ewu ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))))
              -> phi_a2Ewu ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))
                 -> View kon_a2Ewv phi_a2Ewu (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoCaseGoChanGoCase_ p_a2Ews p_a2Ewt = Tag CZ
                                                      (NA_I p_a2Ews :* (NA_I p_a2Ewt :* Nil))
    pattern GoCaseGoChanGoDefault_ ::
              phi_a2Ewx ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))
              -> View kon_a2Ewy phi_a2Ewx (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoCaseGoChanGoDefault_ p_a2Eww = Tag (CS CZ)
                                                 (NA_I p_a2Eww :* Nil)
    pattern ListGoChan_Ifx0 ::
              View kon_a2EwA phi_a2Ewz (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern ListGoChan_Ifx0 = Tag CZ Nil
    pattern ListGoChan_Ifx1 ::
              phi_a2EwD ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))))))
              -> phi_a2EwD ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))))
                 -> View kon_a2EwE phi_a2EwD (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern ListGoChan_Ifx1 p_a2EwB p_a2EwC = Tag (CS CZ)
                                                  (NA_I p_a2EwB :* (NA_I p_a2EwC :* Nil))
    pattern GoChanRecv_ ::
              phi_a2EwH ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))))))
              -> phi_a2EwH ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
                 -> View kon_a2EwI phi_a2EwH (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoChanRecv_ p_a2EwF p_a2EwG = Tag CZ
                                              (NA_I p_a2EwF :* (NA_I p_a2EwG :* Nil))
    pattern GoChanSend_ ::
              phi_a2EwL ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
              -> phi_a2EwL ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
                 -> View kon_a2EwM phi_a2EwL (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoChanSend_ p_a2EwJ p_a2EwK = Tag (CS CZ)
                                              (NA_I p_a2EwJ :* (NA_I p_a2EwK :* Nil))
    pattern MaybeTup1GoExprGoOpNothing_ ::
              View kon_a2EwO phi_a2EwN (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern MaybeTup1GoExprGoOpNothing_ = Tag CZ Nil
    pattern MaybeTup1GoExprGoOpJust_ ::
              phi_a2EwQ ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))))))))
              -> View kon_a2EwR phi_a2EwQ (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern MaybeTup1GoExprGoOpJust_ p_a2EwP = Tag (CS CZ)
                                                   (NA_I p_a2EwP :* Nil)
    pattern Tup1GoExprGoOp_Ifx0 ::
              phi_a2EwU ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))
              -> phi_a2EwU ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))
                 -> View kon_a2EwV phi_a2EwU (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern Tup1GoExprGoOp_Ifx0 p_a2EwS p_a2EwT = Tag CZ
                                                      (NA_I p_a2EwS :* (NA_I p_a2EwT :* Nil))
    pattern GoCaseGoExprGoCase_ ::
              phi_a2EwY ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))
              -> phi_a2EwY ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))
                 -> View kon_a2EwZ phi_a2EwY (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoCaseGoExprGoCase_ p_a2EwW p_a2EwX = Tag CZ
                                                      (NA_I p_a2EwW :* (NA_I p_a2EwX :* Nil))
    pattern GoCaseGoExprGoDefault_ ::
              phi_a2Ex1 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))
              -> View kon_a2Ex2 phi_a2Ex1 (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoCaseGoExprGoDefault_ p_a2Ex0 = Tag (CS CZ)
                                                 (NA_I p_a2Ex0 :* Nil)
    pattern GoCaseGoTypeGoCase_ ::
              phi_a2Ex5 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))))))))))
              -> phi_a2Ex5 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))
                 -> View kon_a2Ex6 phi_a2Ex5 (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoCaseGoTypeGoCase_ p_a2Ex3 p_a2Ex4 = Tag CZ
                                                      (NA_I p_a2Ex3 :* (NA_I p_a2Ex4 :* Nil))
    pattern GoCaseGoTypeGoDefault_ ::
              phi_a2Ex8 ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))
              -> View kon_a2Ex9 phi_a2Ex8 (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoCaseGoTypeGoDefault_ p_a2Ex7 = Tag (CS CZ)
                                                 (NA_I p_a2Ex7 :* Nil)
    pattern ListGoType_Ifx0 ::
              View kon_a2Exb phi_a2Exa (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern ListGoType_Ifx0 = Tag CZ Nil
    pattern ListGoType_Ifx1 ::
              phi_a2Exe ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))
              -> phi_a2Exe ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))))))))))
                 -> View kon_a2Exf phi_a2Exe (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern ListGoType_Ifx1 p_a2Exc p_a2Exd = Tag (CS CZ)
                                                  (NA_I p_a2Exc :* (NA_I p_a2Exd :* Nil))
    pattern GoMethSpec_ ::
              phi_a2Exi ( 'S  'Z)
              -> phi_a2Exi ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))
                 -> View kon_a2Exj phi_a2Exi (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoMethSpec_ p_a2Exg p_a2Exh = Tag CZ
                                              (NA_I p_a2Exg :* (NA_I p_a2Exh :* Nil))
    pattern GoInterface_ ::
              phi_a2Exl ( 'S  'Z)
              -> View kon_a2Exm phi_a2Exl (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoInterface_ p_a2Exk = Tag (CS CZ) (NA_I p_a2Exk :* Nil)
    pattern GoFieldType_ ::
              kon_a2Exr  'GoString
              -> phi_a2Exq ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))
                 -> phi_a2Exq ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))
                    -> View kon_a2Exr phi_a2Exq (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoFieldType_ p_a2Exn p_a2Exo p_a2Exp = Tag CZ
                                                       (NA_K p_a2Exn :* (NA_I p_a2Exo :* (NA_I p_a2Exp :* Nil)))
    pattern GoFieldAnon_ ::
              kon_a2Exw  'GoString
              -> kon_a2Exw  'GoBool
                 -> phi_a2Exv ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))
                    -> View kon_a2Exw phi_a2Exv (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoFieldAnon_ p_a2Exs p_a2Ext p_a2Exu = Tag (CS CZ)
                                                       (NA_K p_a2Exs :* (NA_K p_a2Ext :* (NA_I p_a2Exu :* Nil)))
    pattern GoTypeSpec_ ::
              phi_a2Exz ( 'S  'Z)
              -> phi_a2Exz ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z))))))))))))))))))
                 -> View kon_a2ExA phi_a2Exz (Lkup ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S ( 'S  'Z)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) CodesGoSource)
    pattern GoTypeSpec_ p_a2Exx p_a2Exy = Tag CZ
                                              (NA_I p_a2Exx :* (NA_I p_a2Exy :* Nil))
    instance Family GoSingl FamGoSource CodesGoSource where
      sfrom'
        = \case
            IdxGoSource
              -> \case
                   El (GoSource x_a2ExB x_a2ExC x_a2ExD)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.Z
                             (NA_I (El x_a2ExB)
                                :* (NA_I (El x_a2ExC) :* (NA_I (El x_a2ExD) :* Nil))))
            IdxGoId
              -> \case
                   El (GoId x_a2ExE)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_K (SGoString x_a2ExE) :* Nil))
            IdxListGoPrel
              -> \case
                   El [] -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El ((:) x_a2ExF x_a2ExG)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_I (El x_a2ExF) :* (NA_I (El x_a2ExG) :* Nil))))
            IdxListGoDecl
              -> \case
                   El [] -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El ((:) x_a2ExH x_a2ExI)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_I (El x_a2ExH) :* (NA_I (El x_a2ExI) :* Nil))))
            IdxGoPrel
              -> \case
                   El (GoImportDecl x_a2ExJ)
                     -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2ExJ) :* Nil))
            IdxListGoImpSpec
              -> \case
                   El [] -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El ((:) x_a2ExK x_a2ExL)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_I (El x_a2ExK) :* (NA_I (El x_a2ExL) :* Nil))))
            IdxGoImpSpec
              -> \case
                   El (GoImpSpec x_a2ExM x_a2ExN)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.Z
                             (NA_I (El x_a2ExM) :* (NA_K (SGoString x_a2ExN) :* Nil)))
            IdxGoImpType
              -> \case
                   El GoImp -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El (GoImpDot x_a2ExO)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2ExO) :* Nil)))
                   El (GoImpQual x_a2ExP)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2ExP) :* Nil))))
            IdxGoOp
              -> \case
                   El (GoOp x_a2ExQ)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_K (SGoString x_a2ExQ) :* Nil))
            IdxGoDecl
              -> \case
                   El (GoConst x_a2ExR)
                     -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2ExR) :* Nil))
                   El (GoType x_a2ExS)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2ExS) :* Nil)))
                   El (GoVar x_a2ExT)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2ExT) :* Nil))))
                   El (GoFunc x_a2ExU)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2ExU) :* Nil)))))
                   El (GoMeth x_a2ExV)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.Z
                                         (NA_I (El x_a2ExV) :* Nil))))))
            IdxListGoCVSpec
              -> \case
                   El [] -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El ((:) x_a2ExW x_a2ExX)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_I (El x_a2ExW) :* (NA_I (El x_a2ExX) :* Nil))))
            IdxListGoTypeSpec
              -> \case
                   El [] -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El ((:) x_a2ExY x_a2ExZ)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_I (El x_a2ExY) :* (NA_I (El x_a2ExZ) :* Nil))))
            IdxGoFuncDecl
              -> \case
                   El (GoFuncDecl x_a2Ey0 x_a2Ey1 x_a2Ey2)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.Z
                             (NA_I (El x_a2Ey0)
                                :* (NA_I (El x_a2Ey1) :* (NA_I (El x_a2Ey2) :* Nil))))
            IdxGoMethDecl
              -> \case
                   El (GoMethDecl x_a2Ey3 x_a2Ey4 x_a2Ey5 x_a2Ey6)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.Z
                             (NA_I (El x_a2Ey3)
                                :*
                                  (NA_I (El x_a2Ey4)
                                     :* (NA_I (El x_a2Ey5) :* (NA_I (El x_a2Ey6) :* Nil)))))
            IdxGoCVSpec
              -> \case
                   El (GoCVSpec x_a2Ey7 x_a2Ey8 x_a2Ey9)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.Z
                             (NA_I (El x_a2Ey7)
                                :* (NA_I (El x_a2Ey8) :* (NA_I (El x_a2Ey9) :* Nil))))
            IdxListGoId
              -> \case
                   El [] -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El ((:) x_a2Eya x_a2Eyb)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_I (El x_a2Eya) :* (NA_I (El x_a2Eyb) :* Nil))))
            IdxMaybeGoType
              -> \case
                   El Nothing -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El (Just x_a2Eyc)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2Eyc) :* Nil)))
            IdxListGoExpr
              -> \case
                   El [] -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El ((:) x_a2Eyd x_a2Eye)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_I (El x_a2Eyd) :* (NA_I (El x_a2Eye) :* Nil))))
            IdxGoType
              -> \case
                   El (GoTypeName x_a2Eyf x_a2Eyg)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.Z
                             (NA_I (El x_a2Eyf) :* (NA_I (El x_a2Eyg) :* Nil)))
                   El (GoArrayType x_a2Eyh x_a2Eyi)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_I (El x_a2Eyh) :* (NA_I (El x_a2Eyi) :* Nil))))
                   El (GoChannelType x_a2Eyj x_a2Eyk)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.Z
                                   (NA_I (El x_a2Eyj) :* (NA_I (El x_a2Eyk) :* Nil)))))
                   El (GoElipsisType x_a2Eyl)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2Eyl) :* Nil)))))
                   El (GoFunctionType x_a2Eym)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.Z
                                         (NA_I (El x_a2Eym) :* Nil))))))
                   El (GoInterfaceType x_a2Eyn)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.Z
                                            (NA_I (El x_a2Eyn) :* Nil)))))))
                   El (GoMapType x_a2Eyo x_a2Eyp)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.S
                                            (sop-core-0.4.0.0:Data.SOP.NS.Z
                                               (NA_I (El x_a2Eyo)
                                                  :* (NA_I (El x_a2Eyp) :* Nil)))))))))
                   El (GoPointerType x_a2Eyq)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.S
                                            (sop-core-0.4.0.0:Data.SOP.NS.S
                                               (sop-core-0.4.0.0:Data.SOP.NS.Z
                                                  (NA_I (El x_a2Eyq) :* Nil)))))))))
                   El (GoSliceType x_a2Eyr)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.S
                                            (sop-core-0.4.0.0:Data.SOP.NS.S
                                               (sop-core-0.4.0.0:Data.SOP.NS.S
                                                  (sop-core-0.4.0.0:Data.SOP.NS.Z
                                                     (NA_I (El x_a2Eyr) :* Nil))))))))))
                   El (GoStructType x_a2Eys)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.S
                                            (sop-core-0.4.0.0:Data.SOP.NS.S
                                               (sop-core-0.4.0.0:Data.SOP.NS.S
                                                  (sop-core-0.4.0.0:Data.SOP.NS.S
                                                     (sop-core-0.4.0.0:Data.SOP.NS.Z
                                                        (NA_I (El x_a2Eys) :* Nil)))))))))))
            IdxGoExpr
              -> \case
                   El (GoPrim x_a2Eyt)
                     -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2Eyt) :* Nil))
                   El (Go1Op x_a2Eyu x_a2Eyv)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_I (El x_a2Eyu) :* (NA_I (El x_a2Eyv) :* Nil))))
                   El (Go2Op x_a2Eyw x_a2Eyx x_a2Eyy)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.Z
                                   (NA_I (El x_a2Eyw)
                                      :* (NA_I (El x_a2Eyx) :* (NA_I (El x_a2Eyy) :* Nil))))))
            IdxGoChanKind
              -> \case
                   El GoIChan -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El GoOChan
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z Nil))
                   El GoIOChan
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)))
            IdxGoSig
              -> \case
                   El (GoSig x_a2Eyz x_a2EyA)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.Z
                             (NA_I (El x_a2Eyz) :* (NA_I (El x_a2EyA) :* Nil)))
            IdxListGoMethSpec
              -> \case
                   El [] -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El ((:) x_a2EyB x_a2EyC)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_I (El x_a2EyB) :* (NA_I (El x_a2EyC) :* Nil))))
            IdxListGoFieldType
              -> \case
                   El [] -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El ((:) x_a2EyD x_a2EyE)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_I (El x_a2EyD) :* (NA_I (El x_a2EyE) :* Nil))))
            IdxGoPrim
              -> \case
                   El (GoLiteral x_a2EyF)
                     -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2EyF) :* Nil))
                   El (GoQual x_a2EyG x_a2EyH)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_I (El x_a2EyG) :* (NA_I (El x_a2EyH) :* Nil))))
                   El (GoMethod x_a2EyI x_a2EyJ)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.Z
                                   (NA_I (El x_a2EyI) :* (NA_I (El x_a2EyJ) :* Nil)))))
                   El (GoParen x_a2EyK)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2EyK) :* Nil)))))
                   El (GoCast x_a2EyL x_a2EyM)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.Z
                                         (NA_I (El x_a2EyL) :* (NA_I (El x_a2EyM) :* Nil)))))))
                   El (GoNew x_a2EyN)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.Z
                                            (NA_I (El x_a2EyN) :* Nil)))))))
                   El (GoMake x_a2EyO x_a2EyP)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.S
                                            (sop-core-0.4.0.0:Data.SOP.NS.Z
                                               (NA_I (El x_a2EyO)
                                                  :* (NA_I (El x_a2EyP) :* Nil)))))))))
                   El (GoSelect x_a2EyQ x_a2EyR)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.S
                                            (sop-core-0.4.0.0:Data.SOP.NS.S
                                               (sop-core-0.4.0.0:Data.SOP.NS.Z
                                                  (NA_I (El x_a2EyQ)
                                                     :* (NA_I (El x_a2EyR) :* Nil))))))))))
                   El (GoIndex x_a2EyS x_a2EyT)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.S
                                            (sop-core-0.4.0.0:Data.SOP.NS.S
                                               (sop-core-0.4.0.0:Data.SOP.NS.S
                                                  (sop-core-0.4.0.0:Data.SOP.NS.Z
                                                     (NA_I (El x_a2EyS)
                                                        :* (NA_I (El x_a2EyT) :* Nil)))))))))))
                   El (GoSlice x_a2EyU x_a2EyV)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.S
                                            (sop-core-0.4.0.0:Data.SOP.NS.S
                                               (sop-core-0.4.0.0:Data.SOP.NS.S
                                                  (sop-core-0.4.0.0:Data.SOP.NS.S
                                                     (sop-core-0.4.0.0:Data.SOP.NS.Z
                                                        (NA_I (El x_a2EyU)
                                                           :* (NA_I (El x_a2EyV) :* Nil))))))))))))
                   El (GoTA x_a2EyW x_a2EyX)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.S
                                            (sop-core-0.4.0.0:Data.SOP.NS.S
                                               (sop-core-0.4.0.0:Data.SOP.NS.S
                                                  (sop-core-0.4.0.0:Data.SOP.NS.S
                                                     (sop-core-0.4.0.0:Data.SOP.NS.S
                                                        (sop-core-0.4.0.0:Data.SOP.NS.Z
                                                           (NA_I (El x_a2EyW)
                                                              :*
                                                                (NA_I (El x_a2EyX)
                                                                   :* Nil)))))))))))))
                   El (GoCall x_a2EyY x_a2EyZ x_a2Ez0)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.S
                                            (sop-core-0.4.0.0:Data.SOP.NS.S
                                               (sop-core-0.4.0.0:Data.SOP.NS.S
                                                  (sop-core-0.4.0.0:Data.SOP.NS.S
                                                     (sop-core-0.4.0.0:Data.SOP.NS.S
                                                        (sop-core-0.4.0.0:Data.SOP.NS.S
                                                           (sop-core-0.4.0.0:Data.SOP.NS.Z
                                                              (NA_I (El x_a2EyY)
                                                                 :*
                                                                   (NA_I (El x_a2EyZ)
                                                                      :*
                                                                        (NA_K (SGoBool x_a2Ez0)
                                                                           :* Nil)))))))))))))))
            IdxGoLit
              -> \case
                   El (GoLitInt x_a2Ez1 x_a2Ez2)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.Z
                             (NA_K (SGoString x_a2Ez1) :* (NA_K (SGoInteger x_a2Ez2) :* Nil)))
                   El (GoLitReal x_a2Ez3 x_a2Ez4)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_K (SGoString x_a2Ez3) :* (NA_K (SGoFloat x_a2Ez4) :* Nil))))
                   El (GoLitImag x_a2Ez5 x_a2Ez6)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.Z
                                   (NA_K (SGoString x_a2Ez5) :* (NA_K (SGoFloat x_a2Ez6) :* Nil)))))
                   El (GoLitChar x_a2Ez7 x_a2Ez8)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.Z
                                      (NA_K (SGoString x_a2Ez7)
                                         :* (NA_K (SGoChar x_a2Ez8) :* Nil))))))
                   El (GoLitStr x_a2Ez9 x_a2Eza)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.Z
                                         (NA_K (SGoString x_a2Ez9)
                                            :* (NA_K (SGoString x_a2Eza) :* Nil)))))))
                   El (GoLitComp x_a2Ezb x_a2Ezc)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.Z
                                            (NA_I (El x_a2Ezb) :* (NA_I (El x_a2Ezc) :* Nil))))))))
                   El (GoLitFunc x_a2Ezd)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.S
                                            (sop-core-0.4.0.0:Data.SOP.NS.Z
                                               (NA_I (El x_a2Ezd) :* Nil))))))))
            IdxGoRec
              -> \case
                   El (GoRec x_a2Eze x_a2Ezf x_a2Ezg)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.Z
                             (NA_K (SGoBool x_a2Eze)
                                :* (NA_I (El x_a2Ezf) :* (NA_I (El x_a2Ezg) :* Nil))))
            IdxGoComp
              -> \case
                   El (GoComp x_a2Ezh)
                     -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2Ezh) :* Nil))
            IdxGoFuncExpr
              -> \case
                   El (GoFuncExpr x_a2Ezi x_a2Ezj)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.Z
                             (NA_I (El x_a2Ezi) :* (NA_I (El x_a2Ezj) :* Nil)))
            IdxListGoElement
              -> \case
                   El [] -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El ((:) x_a2Ezk x_a2Ezl)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_I (El x_a2Ezk) :* (NA_I (El x_a2Ezl) :* Nil))))
            IdxGoElement
              -> \case
                   El (GoElement x_a2Ezm x_a2Ezn)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.Z
                             (NA_I (El x_a2Ezm) :* (NA_I (El x_a2Ezn) :* Nil)))
            IdxGoKey
              -> \case
                   El GoKeyNone -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El (GoKeyField x_a2Ezo)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2Ezo) :* Nil)))
                   El (GoKeyIndex x_a2Ezp)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2Ezp) :* Nil))))
            IdxGoValue
              -> \case
                   El (GoValueExpr x_a2Ezq)
                     -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2Ezq) :* Nil))
                   El (GoValueComp x_a2Ezr)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2Ezr) :* Nil)))
            IdxGoBlock
              -> \case
                   El (GoBlock x_a2Ezs)
                     -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2Ezs) :* Nil))
                   El GoNoBlock
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z Nil))
            IdxListGoParam
              -> \case
                   El [] -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El ((:) x_a2Ezt x_a2Ezu)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_I (El x_a2Ezt) :* (NA_I (El x_a2Ezu) :* Nil))))
            IdxGoParam
              -> \case
                   El (GoParam x_a2Ezv x_a2Ezw)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.Z
                             (NA_I (El x_a2Ezv) :* (NA_I (El x_a2Ezw) :* Nil)))
            IdxListGoStmt
              -> \case
                   El [] -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El ((:) x_a2Ezx x_a2Ezy)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_I (El x_a2Ezx) :* (NA_I (El x_a2Ezy) :* Nil))))
            IdxGoStmt
              -> \case
                   El (GoStmtDecl x_a2Ezz)
                     -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2Ezz) :* Nil))
                   El (GoStmtLabeled x_a2EzA x_a2EzB)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_I (El x_a2EzA) :* (NA_I (El x_a2EzB) :* Nil))))
                   El (GoStmtSimple x_a2EzC)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2EzC) :* Nil))))
                   El (GoStmtGo x_a2EzD)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2EzD) :* Nil)))))
                   El (GoStmtReturn x_a2EzE)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.Z
                                         (NA_I (El x_a2EzE) :* Nil))))))
                   El (GoStmtBreak x_a2EzF)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.Z
                                            (NA_I (El x_a2EzF) :* Nil)))))))
                   El (GoStmtContinue x_a2EzG)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.S
                                            (sop-core-0.4.0.0:Data.SOP.NS.Z
                                               (NA_I (El x_a2EzG) :* Nil))))))))
                   El (GoStmtGoto x_a2EzH)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.S
                                            (sop-core-0.4.0.0:Data.SOP.NS.S
                                               (sop-core-0.4.0.0:Data.SOP.NS.Z
                                                  (NA_I (El x_a2EzH) :* Nil)))))))))
                   El GoStmtFallthrough
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.S
                                            (sop-core-0.4.0.0:Data.SOP.NS.S
                                               (sop-core-0.4.0.0:Data.SOP.NS.S
                                                  (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)))))))))
                   El (GoStmtBlock x_a2EzI)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.S
                                            (sop-core-0.4.0.0:Data.SOP.NS.S
                                               (sop-core-0.4.0.0:Data.SOP.NS.S
                                                  (sop-core-0.4.0.0:Data.SOP.NS.S
                                                     (sop-core-0.4.0.0:Data.SOP.NS.Z
                                                        (NA_I (El x_a2EzI) :* Nil)))))))))))
                   El (GoStmtIf x_a2EzJ x_a2EzK x_a2EzL)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.S
                                            (sop-core-0.4.0.0:Data.SOP.NS.S
                                               (sop-core-0.4.0.0:Data.SOP.NS.S
                                                  (sop-core-0.4.0.0:Data.SOP.NS.S
                                                     (sop-core-0.4.0.0:Data.SOP.NS.S
                                                        (sop-core-0.4.0.0:Data.SOP.NS.Z
                                                           (NA_I (El x_a2EzJ)
                                                              :*
                                                                (NA_I (El x_a2EzK)
                                                                   :*
                                                                     (NA_I (El x_a2EzL)
                                                                        :* Nil))))))))))))))
                   El (GoStmtSelect x_a2EzM)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.S
                                            (sop-core-0.4.0.0:Data.SOP.NS.S
                                               (sop-core-0.4.0.0:Data.SOP.NS.S
                                                  (sop-core-0.4.0.0:Data.SOP.NS.S
                                                     (sop-core-0.4.0.0:Data.SOP.NS.S
                                                        (sop-core-0.4.0.0:Data.SOP.NS.S
                                                           (sop-core-0.4.0.0:Data.SOP.NS.Z
                                                              (NA_I (El x_a2EzM) :* Nil)))))))))))))
                   El (GoStmtSwitch x_a2EzN x_a2EzO)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.S
                                            (sop-core-0.4.0.0:Data.SOP.NS.S
                                               (sop-core-0.4.0.0:Data.SOP.NS.S
                                                  (sop-core-0.4.0.0:Data.SOP.NS.S
                                                     (sop-core-0.4.0.0:Data.SOP.NS.S
                                                        (sop-core-0.4.0.0:Data.SOP.NS.S
                                                           (sop-core-0.4.0.0:Data.SOP.NS.S
                                                              (sop-core-0.4.0.0:Data.SOP.NS.Z
                                                                 (NA_I (El x_a2EzN)
                                                                    :*
                                                                      (NA_I (El x_a2EzO)
                                                                         :* Nil)))))))))))))))
                   El (GoStmtTypeSwitch x_a2EzP x_a2EzQ x_a2EzR)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.S
                                            (sop-core-0.4.0.0:Data.SOP.NS.S
                                               (sop-core-0.4.0.0:Data.SOP.NS.S
                                                  (sop-core-0.4.0.0:Data.SOP.NS.S
                                                     (sop-core-0.4.0.0:Data.SOP.NS.S
                                                        (sop-core-0.4.0.0:Data.SOP.NS.S
                                                           (sop-core-0.4.0.0:Data.SOP.NS.S
                                                              (sop-core-0.4.0.0:Data.SOP.NS.S
                                                                 (sop-core-0.4.0.0:Data.SOP.NS.Z
                                                                    (NA_I (El x_a2EzP)
                                                                       :*
                                                                         (NA_I (El x_a2EzQ)
                                                                            :*
                                                                              (NA_I (El x_a2EzR)
                                                                                 :*
                                                                                   Nil)))))))))))))))))
                   El (GoStmtFor x_a2EzS x_a2EzT)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.S
                                            (sop-core-0.4.0.0:Data.SOP.NS.S
                                               (sop-core-0.4.0.0:Data.SOP.NS.S
                                                  (sop-core-0.4.0.0:Data.SOP.NS.S
                                                     (sop-core-0.4.0.0:Data.SOP.NS.S
                                                        (sop-core-0.4.0.0:Data.SOP.NS.S
                                                           (sop-core-0.4.0.0:Data.SOP.NS.S
                                                              (sop-core-0.4.0.0:Data.SOP.NS.S
                                                                 (sop-core-0.4.0.0:Data.SOP.NS.S
                                                                    (sop-core-0.4.0.0:Data.SOP.NS.Z
                                                                       (NA_I (El x_a2EzS)
                                                                          :*
                                                                            (NA_I (El x_a2EzT)
                                                                               :*
                                                                                 Nil)))))))))))))))))
                   El (GoStmtDefer x_a2EzU)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.S
                                            (sop-core-0.4.0.0:Data.SOP.NS.S
                                               (sop-core-0.4.0.0:Data.SOP.NS.S
                                                  (sop-core-0.4.0.0:Data.SOP.NS.S
                                                     (sop-core-0.4.0.0:Data.SOP.NS.S
                                                        (sop-core-0.4.0.0:Data.SOP.NS.S
                                                           (sop-core-0.4.0.0:Data.SOP.NS.S
                                                              (sop-core-0.4.0.0:Data.SOP.NS.S
                                                                 (sop-core-0.4.0.0:Data.SOP.NS.S
                                                                    (sop-core-0.4.0.0:Data.SOP.NS.S
                                                                       (sop-core-0.4.0.0:Data.SOP.NS.Z
                                                                          (NA_I (El x_a2EzU)
                                                                             :* Nil)))))))))))))))))
            IdxGoSimp
              -> \case
                   El GoSimpEmpty -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El (GoSimpRecv x_a2EzV)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2EzV) :* Nil)))
                   El (GoSimpSend x_a2EzW x_a2EzX)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.Z
                                   (NA_I (El x_a2EzW) :* (NA_I (El x_a2EzX) :* Nil)))))
                   El (GoSimpExpr x_a2EzY)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2EzY) :* Nil)))))
                   El (GoSimpInc x_a2EzZ)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.Z
                                         (NA_I (El x_a2EzZ) :* Nil))))))
                   El (GoSimpDec x_a2EA0)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.Z
                                            (NA_I (El x_a2EA0) :* Nil)))))))
                   El (GoSimpAsn x_a2EA1 x_a2EA2 x_a2EA3)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.S
                                            (sop-core-0.4.0.0:Data.SOP.NS.Z
                                               (NA_I (El x_a2EA1)
                                                  :*
                                                    (NA_I (El x_a2EA2)
                                                       :* (NA_I (El x_a2EA3) :* Nil))))))))))
                   El (GoSimpVar x_a2EA4 x_a2EA5)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.S
                                   (sop-core-0.4.0.0:Data.SOP.NS.S
                                      (sop-core-0.4.0.0:Data.SOP.NS.S
                                         (sop-core-0.4.0.0:Data.SOP.NS.S
                                            (sop-core-0.4.0.0:Data.SOP.NS.S
                                               (sop-core-0.4.0.0:Data.SOP.NS.Z
                                                  (NA_I (El x_a2EA4)
                                                     :* (NA_I (El x_a2EA5) :* Nil))))))))))
            IdxMaybeGoId
              -> \case
                   El Nothing -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El (Just x_a2EA6)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2EA6) :* Nil)))
            IdxGoCond
              -> \case
                   El (GoCond x_a2EA7 x_a2EA8)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.Z
                             (NA_I (El x_a2EA7) :* (NA_I (El x_a2EA8) :* Nil)))
            IdxMaybeGoStmt
              -> \case
                   El Nothing -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El (Just x_a2EA9)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2EA9) :* Nil)))
            IdxListGoCaseGoChan
              -> \case
                   El [] -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El ((:) x_a2EAa x_a2EAb)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_I (El x_a2EAa) :* (NA_I (El x_a2EAb) :* Nil))))
            IdxListGoCaseGoExpr
              -> \case
                   El [] -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El ((:) x_a2EAc x_a2EAd)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_I (El x_a2EAc) :* (NA_I (El x_a2EAd) :* Nil))))
            IdxListGoCaseGoType
              -> \case
                   El [] -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El ((:) x_a2EAe x_a2EAf)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_I (El x_a2EAe) :* (NA_I (El x_a2EAf) :* Nil))))
            IdxGoForClause
              -> \case
                   El (GoForWhile x_a2EAg)
                     -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2EAg) :* Nil))
                   El (GoForThree x_a2EAh x_a2EAi x_a2EAj)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_I (El x_a2EAh)
                                   :* (NA_I (El x_a2EAi) :* (NA_I (El x_a2EAj) :* Nil)))))
                   El (GoForRange x_a2EAk x_a2EAl)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.S
                                (sop-core-0.4.0.0:Data.SOP.NS.Z
                                   (NA_I (El x_a2EAk) :* (NA_I (El x_a2EAl) :* Nil)))))
            IdxMaybeGoSimp
              -> \case
                   El Nothing -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El (Just x_a2EAm)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2EAm) :* Nil)))
            IdxMaybeGoExpr
              -> \case
                   El Nothing -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El (Just x_a2EAn)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2EAn) :* Nil)))
            IdxGoCaseGoChan
              -> \case
                   El (GoCase x_a2EAo x_a2EAp)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.Z
                             (NA_I (El x_a2EAo) :* (NA_I (El x_a2EAp) :* Nil)))
                   El (GoDefault x_a2EAq)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2EAq) :* Nil)))
            IdxListGoChan
              -> \case
                   El [] -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El ((:) x_a2EAr x_a2EAs)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_I (El x_a2EAr) :* (NA_I (El x_a2EAs) :* Nil))))
            IdxGoChan
              -> \case
                   El (GoChanRecv x_a2EAt x_a2EAu)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.Z
                             (NA_I (El x_a2EAt) :* (NA_I (El x_a2EAu) :* Nil)))
                   El (GoChanSend x_a2EAv x_a2EAw)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_I (El x_a2EAv) :* (NA_I (El x_a2EAw) :* Nil))))
            IdxMaybeTup1GoExprGoOp
              -> \case
                   El Nothing -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El (Just x_a2EAx)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2EAx) :* Nil)))
            IdxTup1GoExprGoOp
              -> \case
                   El ((,) x_a2EAy x_a2EAz)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.Z
                             (NA_I (El x_a2EAy) :* (NA_I (El x_a2EAz) :* Nil)))
            IdxGoCaseGoExpr
              -> \case
                   El (GoCase x_a2EAA x_a2EAB)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.Z
                             (NA_I (El x_a2EAA) :* (NA_I (El x_a2EAB) :* Nil)))
                   El (GoDefault x_a2EAC)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2EAC) :* Nil)))
            IdxGoCaseGoType
              -> \case
                   El (GoCase x_a2EAD x_a2EAE)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.Z
                             (NA_I (El x_a2EAD) :* (NA_I (El x_a2EAE) :* Nil)))
                   El (GoDefault x_a2EAF)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2EAF) :* Nil)))
            IdxListGoType
              -> \case
                   El [] -> Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)
                   El ((:) x_a2EAG x_a2EAH)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_I (El x_a2EAG) :* (NA_I (El x_a2EAH) :* Nil))))
            IdxGoMethSpec
              -> \case
                   El (GoMethSpec x_a2EAI x_a2EAJ)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.Z
                             (NA_I (El x_a2EAI) :* (NA_I (El x_a2EAJ) :* Nil)))
                   El (GoInterface x_a2EAK)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El x_a2EAK) :* Nil)))
            IdxGoFieldType
              -> \case
                   El (GoFieldType x_a2EAL x_a2EAM x_a2EAN)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.Z
                             (NA_K (SGoString x_a2EAL)
                                :* (NA_I (El x_a2EAM) :* (NA_I (El x_a2EAN) :* Nil))))
                   El (GoFieldAnon x_a2EAO x_a2EAP x_a2EAQ)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.S
                             (sop-core-0.4.0.0:Data.SOP.NS.Z
                                (NA_K (SGoString x_a2EAO)
                                   :* (NA_K (SGoBool x_a2EAP) :* (NA_I (El x_a2EAQ) :* Nil)))))
            IdxGoTypeSpec
              -> \case
                   El (GoTypeSpec x_a2EAR x_a2EAS)
                     -> Rep
                          (sop-core-0.4.0.0:Data.SOP.NS.Z
                             (NA_I (El x_a2EAR) :* (NA_I (El x_a2EAS) :* Nil)))
      sto'
        = \case
            IdxGoSource
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EAT) :* (NA_I (El y_a2EAU) :* (NA_I (El y_a2EAV) :* Nil))))
                     -> El (((GoSource y_a2EAT) y_a2EAU) y_a2EAV)
            IdxGoId
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_K (SGoString y_a2EAW) :* Nil))
                     -> El (GoId y_a2EAW)
            IdxListGoPrel
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El []
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EAX) :* (NA_I (El y_a2EAY) :* Nil))))
                     -> El (((:) y_a2EAX) y_a2EAY)
            IdxListGoDecl
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El []
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EAZ) :* (NA_I (El y_a2EB0) :* Nil))))
                     -> El (((:) y_a2EAZ) y_a2EB0)
            IdxGoPrel
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EB1) :* Nil))
                     -> El (GoImportDecl y_a2EB1)
            IdxListGoImpSpec
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El []
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EB2) :* (NA_I (El y_a2EB3) :* Nil))))
                     -> El (((:) y_a2EB2) y_a2EB3)
            IdxGoImpSpec
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EB4) :* (NA_K (SGoString y_a2EB5) :* Nil)))
                     -> El ((GoImpSpec y_a2EB4) y_a2EB5)
            IdxGoImpType
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El GoImp
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EB6) :* Nil)))
                     -> El (GoImpDot y_a2EB6)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EB7) :* Nil))))
                     -> El (GoImpQual y_a2EB7)
            IdxGoOp
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_K (SGoString y_a2EB8) :* Nil))
                     -> El (GoOp y_a2EB8)
            IdxGoDecl
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EB9) :* Nil))
                     -> El (GoConst y_a2EB9)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBa) :* Nil)))
                     -> El (GoType y_a2EBa)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBb) :* Nil))))
                     -> El (GoVar y_a2EBb)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBc) :* Nil)))))
                     -> El (GoFunc y_a2EBc)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBd) :* Nil))))))
                     -> El (GoMeth y_a2EBd)
            IdxListGoCVSpec
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El []
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBe) :* (NA_I (El y_a2EBf) :* Nil))))
                     -> El (((:) y_a2EBe) y_a2EBf)
            IdxListGoTypeSpec
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El []
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBg) :* (NA_I (El y_a2EBh) :* Nil))))
                     -> El (((:) y_a2EBg) y_a2EBh)
            IdxGoFuncDecl
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBi) :* (NA_I (El y_a2EBj) :* (NA_I (El y_a2EBk) :* Nil))))
                     -> El (((GoFuncDecl y_a2EBi) y_a2EBj) y_a2EBk)
            IdxGoMethDecl
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBl) :* (NA_I (El y_a2EBm) :* (NA_I (El y_a2EBn) :* (NA_I (El y_a2EBo) :* Nil)))))
                     -> El ((((GoMethDecl y_a2EBl) y_a2EBm) y_a2EBn) y_a2EBo)
            IdxGoCVSpec
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBp) :* (NA_I (El y_a2EBq) :* (NA_I (El y_a2EBr) :* Nil))))
                     -> El (((GoCVSpec y_a2EBp) y_a2EBq) y_a2EBr)
            IdxListGoId
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El []
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBs) :* (NA_I (El y_a2EBt) :* Nil))))
                     -> El (((:) y_a2EBs) y_a2EBt)
            IdxMaybeGoType
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El Nothing
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBu) :* Nil)))
                     -> El (Just y_a2EBu)
            IdxListGoExpr
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El []
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBv) :* (NA_I (El y_a2EBw) :* Nil))))
                     -> El (((:) y_a2EBv) y_a2EBw)
            IdxGoType
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBx) :* (NA_I (El y_a2EBy) :* Nil)))
                     -> El ((GoTypeName y_a2EBx) y_a2EBy)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBz) :* (NA_I (El y_a2EBA) :* Nil))))
                     -> El ((GoArrayType y_a2EBz) y_a2EBA)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBB) :* (NA_I (El y_a2EBC) :* Nil)))))
                     -> El ((GoChannelType y_a2EBB) y_a2EBC)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBD) :* Nil)))))
                     -> El (GoElipsisType y_a2EBD)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBE) :* Nil))))))
                     -> El (GoFunctionType y_a2EBE)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBF) :* Nil)))))))
                     -> El (GoInterfaceType y_a2EBF)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBG) :* (NA_I (El y_a2EBH) :* Nil)))))))))
                     -> El ((GoMapType y_a2EBG) y_a2EBH)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBI) :* Nil)))))))))
                     -> El (GoPointerType y_a2EBI)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBJ) :* Nil))))))))))
                     -> El (GoSliceType y_a2EBJ)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBK) :* Nil)))))))))))
                     -> El (GoStructType y_a2EBK)
            IdxGoExpr
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBL) :* Nil))
                     -> El (GoPrim y_a2EBL)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBM) :* (NA_I (El y_a2EBN) :* Nil))))
                     -> El ((Go1Op y_a2EBM) y_a2EBN)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBO) :* (NA_I (El y_a2EBP) :* (NA_I (El y_a2EBQ) :* Nil))))))
                     -> El (((Go2Op y_a2EBO) y_a2EBP) y_a2EBQ)
            IdxGoChanKind
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El GoIChan
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z Nil))
                     -> El GoOChan
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)))
                     -> El GoIOChan
            IdxGoSig
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBR) :* (NA_I (El y_a2EBS) :* Nil)))
                     -> El ((GoSig y_a2EBR) y_a2EBS)
            IdxListGoMethSpec
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El []
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBT) :* (NA_I (El y_a2EBU) :* Nil))))
                     -> El (((:) y_a2EBT) y_a2EBU)
            IdxListGoFieldType
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El []
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBV) :* (NA_I (El y_a2EBW) :* Nil))))
                     -> El (((:) y_a2EBV) y_a2EBW)
            IdxGoPrim
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBX) :* Nil))
                     -> El (GoLiteral y_a2EBX)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EBY) :* (NA_I (El y_a2EBZ) :* Nil))))
                     -> El ((GoQual y_a2EBY) y_a2EBZ)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EC0) :* (NA_I (El y_a2EC1) :* Nil)))))
                     -> El ((GoMethod y_a2EC0) y_a2EC1)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EC2) :* Nil)))))
                     -> El (GoParen y_a2EC2)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EC3) :* (NA_I (El y_a2EC4) :* Nil)))))))
                     -> El ((GoCast y_a2EC3) y_a2EC4)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EC5) :* Nil)))))))
                     -> El (GoNew y_a2EC5)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EC6) :* (NA_I (El y_a2EC7) :* Nil)))))))))
                     -> El ((GoMake y_a2EC6) y_a2EC7)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EC8) :* (NA_I (El y_a2EC9) :* Nil))))))))))
                     -> El ((GoSelect y_a2EC8) y_a2EC9)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECa) :* (NA_I (El y_a2ECb) :* Nil)))))))))))
                     -> El ((GoIndex y_a2ECa) y_a2ECb)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECc) :* (NA_I (El y_a2ECd) :* Nil))))))))))))
                     -> El ((GoSlice y_a2ECc) y_a2ECd)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECe) :* (NA_I (El y_a2ECf) :* Nil)))))))))))))
                     -> El ((GoTA y_a2ECe) y_a2ECf)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECg) :* (NA_I (El y_a2ECh) :* (NA_K (SGoBool y_a2ECi) :* Nil)))))))))))))))
                     -> El (((GoCall y_a2ECg) y_a2ECh) y_a2ECi)
            IdxGoLit
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_K (SGoString y_a2ECj) :* (NA_K (SGoInteger y_a2ECk) :* Nil)))
                     -> El ((GoLitInt y_a2ECj) y_a2ECk)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_K (SGoString y_a2ECl) :* (NA_K (SGoFloat y_a2ECm) :* Nil))))
                     -> El ((GoLitReal y_a2ECl) y_a2ECm)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_K (SGoString y_a2ECn) :* (NA_K (SGoFloat y_a2ECo) :* Nil)))))
                     -> El ((GoLitImag y_a2ECn) y_a2ECo)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_K (SGoString y_a2ECp) :* (NA_K (SGoChar y_a2ECq) :* Nil))))))
                     -> El ((GoLitChar y_a2ECp) y_a2ECq)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_K (SGoString y_a2ECr) :* (NA_K (SGoString y_a2ECs) :* Nil)))))))
                     -> El ((GoLitStr y_a2ECr) y_a2ECs)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECt) :* (NA_I (El y_a2ECu) :* Nil))))))))
                     -> El ((GoLitComp y_a2ECt) y_a2ECu)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECv) :* Nil))))))))
                     -> El (GoLitFunc y_a2ECv)
            IdxGoRec
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_K (SGoBool y_a2ECw) :* (NA_I (El y_a2ECx) :* (NA_I (El y_a2ECy) :* Nil))))
                     -> El (((GoRec y_a2ECw) y_a2ECx) y_a2ECy)
            IdxGoComp
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECz) :* Nil))
                     -> El (GoComp y_a2ECz)
            IdxGoFuncExpr
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECA) :* (NA_I (El y_a2ECB) :* Nil)))
                     -> El ((GoFuncExpr y_a2ECA) y_a2ECB)
            IdxListGoElement
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El []
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECC) :* (NA_I (El y_a2ECD) :* Nil))))
                     -> El (((:) y_a2ECC) y_a2ECD)
            IdxGoElement
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECE) :* (NA_I (El y_a2ECF) :* Nil)))
                     -> El ((GoElement y_a2ECE) y_a2ECF)
            IdxGoKey
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El GoKeyNone
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECG) :* Nil)))
                     -> El (GoKeyField y_a2ECG)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECH) :* Nil))))
                     -> El (GoKeyIndex y_a2ECH)
            IdxGoValue
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECI) :* Nil))
                     -> El (GoValueExpr y_a2ECI)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECJ) :* Nil)))
                     -> El (GoValueComp y_a2ECJ)
            IdxGoBlock
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECK) :* Nil))
                     -> El (GoBlock y_a2ECK)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z Nil))
                     -> El GoNoBlock
            IdxListGoParam
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El []
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECL) :* (NA_I (El y_a2ECM) :* Nil))))
                     -> El (((:) y_a2ECL) y_a2ECM)
            IdxGoParam
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECN) :* (NA_I (El y_a2ECO) :* Nil)))
                     -> El ((GoParam y_a2ECN) y_a2ECO)
            IdxListGoStmt
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El []
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECP) :* (NA_I (El y_a2ECQ) :* Nil))))
                     -> El (((:) y_a2ECP) y_a2ECQ)
            IdxGoStmt
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECR) :* Nil))
                     -> El (GoStmtDecl y_a2ECR)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECS) :* (NA_I (El y_a2ECT) :* Nil))))
                     -> El ((GoStmtLabeled y_a2ECS) y_a2ECT)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECU) :* Nil))))
                     -> El (GoStmtSimple y_a2ECU)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECV) :* Nil)))))
                     -> El (GoStmtGo y_a2ECV)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECW) :* Nil))))))
                     -> El (GoStmtReturn y_a2ECW)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECX) :* Nil)))))))
                     -> El (GoStmtBreak y_a2ECX)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECY) :* Nil))))))))
                     -> El (GoStmtContinue y_a2ECY)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ECZ) :* Nil)))))))))
                     -> El (GoStmtGoto y_a2ECZ)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z Nil)))))))))
                     -> El GoStmtFallthrough
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ED0) :* Nil)))))))))))
                     -> El (GoStmtBlock y_a2ED0)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ED1) :* (NA_I (El y_a2ED2) :* (NA_I (El y_a2ED3) :* Nil))))))))))))))
                     -> El (((GoStmtIf y_a2ED1) y_a2ED2) y_a2ED3)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ED4) :* Nil)))))))))))))
                     -> El (GoStmtSelect y_a2ED4)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ED5) :* (NA_I (El y_a2ED6) :* Nil)))))))))))))))
                     -> El ((GoStmtSwitch y_a2ED5) y_a2ED6)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2ED7) :* (NA_I (El y_a2ED8) :* (NA_I (El y_a2ED9) :* Nil)))))))))))))))))
                     -> El (((GoStmtTypeSwitch y_a2ED7) y_a2ED8) y_a2ED9)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDa) :* (NA_I (El y_a2EDb) :* Nil)))))))))))))))))
                     -> El ((GoStmtFor y_a2EDa) y_a2EDb)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDc) :* Nil)))))))))))))))))
                     -> El (GoStmtDefer y_a2EDc)
            IdxGoSimp
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El GoSimpEmpty
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDd) :* Nil)))
                     -> El (GoSimpRecv y_a2EDd)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDe) :* (NA_I (El y_a2EDf) :* Nil)))))
                     -> El ((GoSimpSend y_a2EDe) y_a2EDf)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDg) :* Nil)))))
                     -> El (GoSimpExpr y_a2EDg)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDh) :* Nil))))))
                     -> El (GoSimpInc y_a2EDh)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDi) :* Nil)))))))
                     -> El (GoSimpDec y_a2EDi)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDj) :* (NA_I (El y_a2EDk) :* (NA_I (El y_a2EDl) :* Nil))))))))))
                     -> El (((GoSimpAsn y_a2EDj) y_a2EDk) y_a2EDl)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDm) :* (NA_I (El y_a2EDn) :* Nil))))))))))
                     -> El ((GoSimpVar y_a2EDm) y_a2EDn)
            IdxMaybeGoId
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El Nothing
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDo) :* Nil)))
                     -> El (Just y_a2EDo)
            IdxGoCond
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDp) :* (NA_I (El y_a2EDq) :* Nil)))
                     -> El ((GoCond y_a2EDp) y_a2EDq)
            IdxMaybeGoStmt
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El Nothing
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDr) :* Nil)))
                     -> El (Just y_a2EDr)
            IdxListGoCaseGoChan
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El []
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDs) :* (NA_I (El y_a2EDt) :* Nil))))
                     -> El (((:) y_a2EDs) y_a2EDt)
            IdxListGoCaseGoExpr
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El []
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDu) :* (NA_I (El y_a2EDv) :* Nil))))
                     -> El (((:) y_a2EDu) y_a2EDv)
            IdxListGoCaseGoType
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El []
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDw) :* (NA_I (El y_a2EDx) :* Nil))))
                     -> El (((:) y_a2EDw) y_a2EDx)
            IdxGoForClause
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDy) :* Nil))
                     -> El (GoForWhile y_a2EDy)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDz) :* (NA_I (El y_a2EDA) :* (NA_I (El y_a2EDB) :* Nil)))))
                     -> El (((GoForThree y_a2EDz) y_a2EDA) y_a2EDB)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDC) :* (NA_I (El y_a2EDD) :* Nil)))))
                     -> El ((GoForRange y_a2EDC) y_a2EDD)
            IdxMaybeGoSimp
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El Nothing
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDE) :* Nil)))
                     -> El (Just y_a2EDE)
            IdxMaybeGoExpr
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El Nothing
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDF) :* Nil)))
                     -> El (Just y_a2EDF)
            IdxGoCaseGoChan
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDG) :* (NA_I (El y_a2EDH) :* Nil)))
                     -> El ((GoCase y_a2EDG) y_a2EDH)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDI) :* Nil)))
                     -> El (GoDefault y_a2EDI)
            IdxListGoChan
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El []
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDJ) :* (NA_I (El y_a2EDK) :* Nil))))
                     -> El (((:) y_a2EDJ) y_a2EDK)
            IdxGoChan
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDL) :* (NA_I (El y_a2EDM) :* Nil)))
                     -> El ((GoChanRecv y_a2EDL) y_a2EDM)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDN) :* (NA_I (El y_a2EDO) :* Nil))))
                     -> El ((GoChanSend y_a2EDN) y_a2EDO)
            IdxMaybeTup1GoExprGoOp
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El Nothing
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDP) :* Nil)))
                     -> El (Just y_a2EDP)
            IdxTup1GoExprGoOp
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDQ) :* (NA_I (El y_a2EDR) :* Nil)))
                     -> El (((,) y_a2EDQ) y_a2EDR)
            IdxGoCaseGoExpr
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDS) :* (NA_I (El y_a2EDT) :* Nil)))
                     -> El ((GoCase y_a2EDS) y_a2EDT)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDU) :* Nil)))
                     -> El (GoDefault y_a2EDU)
            IdxGoCaseGoType
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDV) :* (NA_I (El y_a2EDW) :* Nil)))
                     -> El ((GoCase y_a2EDV) y_a2EDW)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDX) :* Nil)))
                     -> El (GoDefault y_a2EDX)
            IdxListGoType
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z Nil) -> El []
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EDY) :* (NA_I (El y_a2EDZ) :* Nil))))
                     -> El (((:) y_a2EDY) y_a2EDZ)
            IdxGoMethSpec
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EE0) :* (NA_I (El y_a2EE1) :* Nil)))
                     -> El ((GoMethSpec y_a2EE0) y_a2EE1)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EE2) :* Nil)))
                     -> El (GoInterface y_a2EE2)
            IdxGoFieldType
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_K (SGoString y_a2EE3) :* (NA_I (El y_a2EE4) :* (NA_I (El y_a2EE5) :* Nil))))
                     -> El (((GoFieldType y_a2EE3) y_a2EE4) y_a2EE5)
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.S (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_K (SGoString y_a2EE6) :* (NA_K (SGoBool y_a2EE7) :* (NA_I (El y_a2EE8) :* Nil)))))
                     -> El (((GoFieldAnon y_a2EE6) y_a2EE7) y_a2EE8)
            IdxGoTypeSpec
              -> \case
                   Rep (sop-core-0.4.0.0:Data.SOP.NS.Z (NA_I (El y_a2EE9) :* (NA_I (El y_a2EEa) :* Nil)))
                     -> El ((GoTypeSpec y_a2EE9) y_a2EEa)
    instance HasDatatypeInfo GoSingl FamGoSource CodesGoSource where
      datatypeInfo _
        = \case
            SZ
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoSource"))
                   ((Record "GoSource")
                      (FieldInfo "getPackage"
                         :*
                           (FieldInfo "getTopLevelPrel"
                              :* (FieldInfo "getTopLevelDecl" :* Nil)))
                      :* Nil)
            SS SZ
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoId"))
                   (Constructor "GoId" :* Nil)
            SS (SS SZ)
              -> ((ADT "GHC.Types") (Name "[]" :@: Name "GoPrel"))
                   (Constructor "[]" :* (((Infix ":") RightAssociative) 5 :* Nil))
            SS (SS (SS SZ))
              -> ((ADT "GHC.Types") (Name "[]" :@: Name "GoDecl"))
                   (Constructor "[]" :* (((Infix ":") RightAssociative) 5 :* Nil))
            SS (SS (SS (SS SZ)))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoPrel"))
                   (Constructor "GoImportDecl" :* Nil)
            SS (SS (SS (SS (SS SZ))))
              -> ((ADT "GHC.Types") (Name "[]" :@: Name "GoImpSpec"))
                   (Constructor "[]" :* (((Infix ":") RightAssociative) 5 :* Nil))
            SS (SS (SS (SS (SS (SS SZ)))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoImpSpec"))
                   (Constructor "GoImpSpec" :* Nil)
            SS (SS (SS (SS (SS (SS (SS SZ))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoImpType"))
                   (Constructor "GoImp"
                      :* (Constructor "GoImpDot" :* (Constructor "GoImpQual" :* Nil)))
            SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoOp"))
                   (Constructor "GoOp" :* Nil)
            SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoDecl"))
                   (Constructor "GoConst"
                      :*
                        (Constructor "GoType"
                           :*
                             (Constructor "GoVar"
                                :* (Constructor "GoFunc" :* (Constructor "GoMeth" :* Nil)))))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))
              -> ((ADT "GHC.Types") (Name "[]" :@: Name "GoCVSpec"))
                   (Constructor "[]" :* (((Infix ":") RightAssociative) 5 :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))
              -> ((ADT "GHC.Types") (Name "[]" :@: Name "GoTypeSpec"))
                   (Constructor "[]" :* (((Infix ":") RightAssociative) 5 :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoFuncDecl"))
                   (Constructor "GoFuncDecl" :* Nil)
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoMethDecl"))
                   (Constructor "GoMethDecl" :* Nil)
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoCVSpec"))
                   (Constructor "GoCVSpec" :* Nil)
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))
              -> ((ADT "GHC.Types") (Name "[]" :@: Name "GoId"))
                   (Constructor "[]" :* (((Infix ":") RightAssociative) 5 :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))
              -> ((ADT "GHC.Maybe") (Name "Maybe" :@: Name "GoType"))
                   (Constructor "Nothing" :* (Constructor "Just" :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))
              -> ((ADT "GHC.Types") (Name "[]" :@: Name "GoExpr"))
                   (Constructor "[]" :* (((Infix ":") RightAssociative) 5 :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoType"))
                   (Constructor "GoTypeName"
                      :*
                        (Constructor "GoArrayType"
                           :*
                             (Constructor "GoChannelType"
                                :*
                                  (Constructor "GoElipsisType"
                                     :*
                                       (Constructor "GoFunctionType"
                                          :*
                                            (Constructor "GoInterfaceType"
                                               :*
                                                 (Constructor "GoMapType"
                                                    :*
                                                      (Constructor "GoPointerType"
                                                         :*
                                                           (Constructor "GoSliceType"
                                                              :*
                                                                (Constructor "GoStructType"
                                                                   :* Nil))))))))))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoExpr"))
                   (Constructor "GoPrim"
                      :* (Constructor "Go1Op" :* (Constructor "Go2Op" :* Nil)))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoChanKind"))
                   (Constructor "GoIChan"
                      :* (Constructor "GoOChan" :* (Constructor "GoIOChan" :* Nil)))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoSig"))
                   (Constructor "GoSig" :* Nil)
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))
              -> ((ADT "GHC.Types") (Name "[]" :@: Name "GoMethSpec"))
                   (Constructor "[]" :* (((Infix ":") RightAssociative) 5 :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))
              -> ((ADT "GHC.Types") (Name "[]" :@: Name "GoFieldType"))
                   (Constructor "[]" :* (((Infix ":") RightAssociative) 5 :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoPrim"))
                   (Constructor "GoLiteral"
                      :*
                        (Constructor "GoQual"
                           :*
                             (Constructor "GoMethod"
                                :*
                                  (Constructor "GoParen"
                                     :*
                                       (Constructor "GoCast"
                                          :*
                                            (Constructor "GoNew"
                                               :*
                                                 (Constructor "GoMake"
                                                    :*
                                                      (Constructor "GoSelect"
                                                         :*
                                                           (Constructor "GoIndex"
                                                              :*
                                                                (Constructor "GoSlice"
                                                                   :*
                                                                     (Constructor "GoTA"
                                                                        :*
                                                                          (Constructor "GoCall"
                                                                             :* Nil))))))))))))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoLit"))
                   (Constructor "GoLitInt"
                      :*
                        (Constructor "GoLitReal"
                           :*
                             (Constructor "GoLitImag"
                                :*
                                  (Constructor "GoLitChar"
                                     :*
                                       (Constructor "GoLitStr"
                                          :*
                                            (Constructor "GoLitComp"
                                               :* (Constructor "GoLitFunc" :* Nil)))))))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoRec"))
                   (Constructor "GoRec" :* Nil)
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoComp"))
                   (Constructor "GoComp" :* Nil)
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoFuncExpr"))
                   (Constructor "GoFuncExpr" :* Nil)
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))
              -> ((ADT "GHC.Types") (Name "[]" :@: Name "GoElement"))
                   (Constructor "[]" :* (((Infix ":") RightAssociative) 5 :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoElement"))
                   (Constructor "GoElement" :* Nil)
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoKey"))
                   (Constructor "GoKeyNone"
                      :* (Constructor "GoKeyField" :* (Constructor "GoKeyIndex" :* Nil)))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoValue"))
                   (Constructor "GoValueExpr" :* (Constructor "GoValueComp" :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoBlock"))
                   ((Record "GoBlock") (FieldInfo "getStmt" :* Nil)
                      :* (Constructor "GoNoBlock" :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))
              -> ((ADT "GHC.Types") (Name "[]" :@: Name "GoParam"))
                   (Constructor "[]" :* (((Infix ":") RightAssociative) 5 :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoParam"))
                   (Constructor "GoParam" :* Nil)
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))))
              -> ((ADT "GHC.Types") (Name "[]" :@: Name "GoStmt"))
                   (Constructor "[]" :* (((Infix ":") RightAssociative) 5 :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoStmt"))
                   (Constructor "GoStmtDecl"
                      :*
                        (Constructor "GoStmtLabeled"
                           :*
                             (Constructor "GoStmtSimple"
                                :*
                                  (Constructor "GoStmtGo"
                                     :*
                                       (Constructor "GoStmtReturn"
                                          :*
                                            (Constructor "GoStmtBreak"
                                               :*
                                                 (Constructor "GoStmtContinue"
                                                    :*
                                                      (Constructor "GoStmtGoto"
                                                         :*
                                                           (Constructor "GoStmtFallthrough"
                                                              :*
                                                                (Constructor "GoStmtBlock"
                                                                   :*
                                                                     (Constructor "GoStmtIf"
                                                                        :*
                                                                          (Constructor
                                                                             "GoStmtSelect"
                                                                             :*
                                                                               (Constructor
                                                                                  "GoStmtSwitch"
                                                                                  :*
                                                                                    (Constructor
                                                                                       "GoStmtTypeSwitch"
                                                                                       :*
                                                                                         (Constructor
                                                                                            "GoStmtFor"
                                                                                            :*
                                                                                              (Constructor
                                                                                                 "GoStmtDefer"
                                                                                                 :*
                                                                                                   Nil))))))))))))))))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoSimp"))
                   (Constructor "GoSimpEmpty"
                      :*
                        (Constructor "GoSimpRecv"
                           :*
                             (Constructor "GoSimpSend"
                                :*
                                  (Constructor "GoSimpExpr"
                                     :*
                                       (Constructor "GoSimpInc"
                                          :*
                                            (Constructor "GoSimpDec"
                                               :*
                                                 (Constructor "GoSimpAsn"
                                                    :* (Constructor "GoSimpVar" :* Nil))))))))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))))))))
              -> ((ADT "GHC.Maybe") (Name "Maybe" :@: Name "GoId"))
                   (Constructor "Nothing" :* (Constructor "Just" :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoCond"))
                   (Constructor "GoCond" :* Nil)
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))))))))))
              -> ((ADT "GHC.Maybe") (Name "Maybe" :@: Name "GoStmt"))
                   (Constructor "Nothing" :* (Constructor "Just" :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))))))))))
              -> ((ADT "GHC.Types")
                    (Name "[]" :@: (Name "GoCase" :@: Name "GoChan")))
                   (Constructor "[]" :* (((Infix ":") RightAssociative) 5 :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))))))))))))
              -> ((ADT "GHC.Types")
                    (Name "[]" :@: (Name "GoCase" :@: Name "GoExpr")))
                   (Constructor "[]" :* (((Infix ":") RightAssociative) 5 :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))))))))))))
              -> ((ADT "GHC.Types")
                    (Name "[]" :@: (Name "GoCase" :@: Name "GoType")))
                   (Constructor "[]" :* (((Infix ":") RightAssociative) 5 :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoForClause"))
                   (Constructor "GoForWhile"
                      :* (Constructor "GoForThree" :* (Constructor "GoForRange" :* Nil)))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))))))))))))))
              -> ((ADT "GHC.Maybe") (Name "Maybe" :@: Name "GoSimp"))
                   (Constructor "Nothing" :* (Constructor "Just" :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))))))))))))))))
              -> ((ADT "GHC.Maybe") (Name "Maybe" :@: Name "GoExpr"))
                   (Constructor "Nothing" :* (Constructor "Just" :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST")
                    (Name "GoCase" :@: Name "GoChan"))
                   (Constructor "GoCase" :* (Constructor "GoDefault" :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))))))))))))))))))
              -> ((ADT "GHC.Types") (Name "[]" :@: Name "GoChan"))
                   (Constructor "[]" :* (((Infix ":") RightAssociative) 5 :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoChan"))
                   (Constructor "GoChanRecv" :* (Constructor "GoChanSend" :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))))))))))))))))))))
              -> ((ADT "GHC.Maybe")
                    (Name "Maybe"
                       :@: ((Name "(,)" :@: Name "GoExpr") :@: Name "GoOp")))
                   (Constructor "Nothing" :* (Constructor "Just" :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))))))))))))))))))))
              -> ((ADT "GHC.Tuple")
                    ((Name "(,)" :@: Name "GoExpr") :@: Name "GoOp"))
                   (Constructor "(,)" :* Nil)
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))))))))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST")
                    (Name "GoCase" :@: Name "GoExpr"))
                   (Constructor "GoCase" :* (Constructor "GoDefault" :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))))))))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST")
                    (Name "GoCase" :@: Name "GoType"))
                   (Constructor "GoCase" :* (Constructor "GoDefault" :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))))))))))))))))))))))))
              -> ((ADT "GHC.Types") (Name "[]" :@: Name "GoType"))
                   (Constructor "[]" :* (((Infix ":") RightAssociative) 5 :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))))))))))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoMethSpec"))
                   (Constructor "GoMethSpec" :* (Constructor "GoInterface" :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ))))))))))))))))))))))))))))))))))))))))))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoFieldType"))
                   ((Record "GoFieldType")
                      (FieldInfo "getFieldTag"
                         :* (FieldInfo "getFieldId" :* (FieldInfo "getFieldType" :* Nil)))
                      :*
                        ((Record "GoFieldAnon")
                           (FieldInfo "getFieldTag"
                              :* (FieldInfo "getFieldPtr" :* (FieldInfo "getFieldType" :* Nil)))
                           :* Nil))
            SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS (SS SZ)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
              -> ((ADT "Languages.Go.Syntax.AST") (Name "GoTypeSpec"))
                   (Constructor "GoTypeSpec" :* Nil)
